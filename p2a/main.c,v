head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2017.10.08.12.37.55;	author Administrator;	state Exp;
branches;
next	1.7;

1.7
date	2017.10.07.07.37.42;	author Administrator;	state Exp;
branches;
next	1.6;

1.6
date	2017.09.30.15.16.48;	author Administrator;	state Exp;
branches;
next	1.5;

1.5
date	2017.09.27.15.53.18;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2017.09.26.16.54.38;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2017.09.25.16.26.26;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2017.09.24.16.33.49;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2017.09.24.14.50.45;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.8
log
@UPDATE: use macro and uniform entry fsm.c to include different engine
@
text
@#include "grmm.tab.h"
#include "fsm.h"
extern FILE *yyin;
extern int yydebug;

#define P2A_VERSION 20171007

void usage(char* proname){
  printf("Proto Convert use Javascript, version: %d\n", P2A_VERSION);
  printf("Usage: %s [option] protofile script.js\n", proname);
  puts("  -d      swith to debug mode");
}

/// \return 0-no input file other-input file index
int parsearg(int argc, char** argv){
  int last = 1; // 0 is always programm name, skip it
  if (last == argc)  {
    return 0;
  }
  for (; last<argc; last++) {
    if ('-' == argv[last][0]) {
      switch (argv[last][1])  {
        case 'd':
          {yydebug = 1;} break;
        case 'h':
          {usage(argv[0]); exit(1);}
        default: break;
      }
    } else {
      break;
    }
  }
  return last;
}

int main(int argc, char** argv){
  int parseRet = 0, argRet = 0;
  argRet = parsearg(argc, argv);

  if ( (argRet != 0) && (argc-argRet>=2)) {//At least 2 filename
    char *scrpFile = argv[argRet+1];
    yyin = fopen(argv[argRet], "r");
    p2a_accessRootVar(1, scrpFile);
    if ( 0==p2a_initScript(scrpFile) ) {
      parseRet = yyparse();
    }
    p2a_finiScript();
    fclose(yyin);
  } else {
    usage(argv[0]);
  }
  return parseRet;
}
@


1.7
log
@UPDATE: show compile or run error
@
text
@d6 1
a6 1
#define P2A_VERSION 20170930
d8 3
a10 3
void usage(){
  printf("A proto to any tool, version: %d\n", P2A_VERSION);
  puts("Usage: p2a [option] protofile script.js");
a17 1
    puts("no input proto file!");
d26 1
a26 1
          {usage(); exit(1);}
a35 49
#ifdef WITH_LUA
lua_State *g_L;

/// \param[in] sfn script filename
int initLuaScript(char* sfn){
  int ret=0;
  g_L = luaL_newstate();
  luaL_openlibs(g_L);
  //TODO loop more script
  ret = luaL_dofile(g_L, sfn);
  return ret;
}
void finiLuaScript(){
  lua_close(g_L);
}
#endif

js_State *g_J;

static void jsB_alert(js_State* J){
  puts(js_tostring(J, 1));//in function 0 is this
  js_pushundefined(J);
}

/// \param[in] sfn script filename
/// \return 0-OK 1-Fail
int initJsScript(char* sfn){
  int ret=0;
  g_J = js_newstate(NULL, NULL, JS_STRICT);
  js_newcfunction(g_J, jsB_alert, "print", 1);
  js_setglobal(g_J, "print");
  ret = js_ploadfile(g_J, sfn);
  if (0==ret) {
    js_pushnull(g_J);
    if (1==js_pcall(g_J, 0)) {
        printf("call %s file illegal!%s\n", sfn, js_tostring(g_J, 0));
    }
  } else {
    printf("load %s file wrong!%s\n", sfn, js_tostring(g_J, 0));
  }
  js_pop(g_J, 1);//ok or wrong, pop result leave in stack

  return ret;
}

void finiJsScript(){
  js_freestate(g_J);
}

d44 1
a44 2
    //initLuaScript();
    if ( 0==initJsScript(scrpFile) ) {
d46 2
a47 3
    };
    finiJsScript();
    //finiLuaScript();
d50 1
a50 1
    usage();
@


1.6
log
@UPDATE: control lua with macro, use function instead of hardcord script name, extend js parse
@
text
@d72 1
a72 1
        puts("javascript is illegal");
a73 1
    js_pop(g_J, 1);
d75 1
a75 1
    printf("javascript file %s is wrong!\n", sfn);
d77 1
@


1.5
log
@UPDATE: pass flex token to script, bison parse to trigger script, drop script fini
@
text
@a0 2
#include <stdio.h>
#include <stdlib.h>
d6 1
a6 4
#define P2A_VERSION 20170925

lua_State *g_L;
js_State *g_J;
d10 1
a10 1
  puts("Usage: p2a [option] filename");
d37 5
a41 1
int initLuaScript(){
d46 1
a46 1
  ret = luaL_dofile(g_L, "head.lua");
a48 1

d52 3
d61 3
a63 1
int initJsScript(){
d68 10
a77 1
  ret = js_dofile(g_J, "head.js");//no elem left on stack
d79 1
a79 1
  return 0;
d90 2
a91 1
  if (argRet != 0) {
d93 5
a97 3
    initLuaScript();
    initJsScript();
    parseRet = yyparse();
d99 1
a99 1
    finiLuaScript();
d101 2
@


1.4
log
@UPDATE: let js support print, fsm both drive lua and js
@
text
@a51 8
  char* p = "head";

  lua_getglobal(g_L, p);
  lua_getfield(g_L, 1, "fini");
  lua_pushvalue(g_L, 1);
  lua_call(g_L, 1, 0);
  lua_pop(g_L, 1);

a70 7
  char* fn = "head";

  js_getglobal(g_J, fn);
  js_getproperty(g_J, 0, "fini");
  js_copy(g_J, 0);
  js_call(g_J, 0);
  js_pop(g_J, 2);
@


1.3
log
@UPDATE: add lua/js script interactive
@
text
@d63 5
d71 3
a73 8
  ret = js_dofile(g_J, "head.js");
  js_getglobal(g_J, "head");
  js_getproperty(g_J, 0, "fini");
  js_copy(g_J, 0);

  js_call(g_J, 0);
printf("js:%s\n", js_tostring(g_J, -1));
  js_pop(g_J, 1);
d79 7
@


1.2
log
@UPDATE: 1.add deal option 2.add proto result parse
@
text
@d4 1
d10 3
d42 40
d88 2
d91 2
@


1.1
log
@INSERT: Init release, Minimal Valuable Product
@
text
@d2 1
d7 31
d39 2
a40 2
  int parseRet = 0;
  yydebug = 1;
d42 4
a45 4
  if (argc==2) {
    yyin = fopen(argv[1], "r");
	parseRet = yyparse();
	fclose(yyin);
@

