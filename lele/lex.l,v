head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	2018.08.12.02.10.22;	author Administrator;	state Exp;
branches;
next	1.7;

1.7
date	2018.08.11.04.42.27;	author Administrator;	state Exp;
branches;
next	1.6;

1.6
date	2018.07.26.13.56.17;	author Administrator;	state Exp;
branches;
next	1.5;

1.5
date	2018.07.22.07.41.02;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2018.07.22.03.39.47;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2018.07.21.04.59.24;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2018.06.17.11.37.46;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2018.06.17.10.26.34;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.8
log
@INSERT: support use js
@
text
@%option nounistd
%option reentrant

%{
#include <string.h>
#include <io.h>
#include "parse.h"
#include "forward.h"

struct LexExtra
{
  void *parser;
  void *vm;
};

#define CALL_YYP(major, minor) \
        struct LexExtra *v=(struct LexExtra*)yyget_extra(yyscanner);\
        void*yyp=v->parser;\
        void*dynVm=v->vm;\
        scriptPush(dynVm, major, minor);\
        p2a(yyp, major, minor, dynVm)
#define DEBUG_TOKEN() \
/*printf("LexStr: %s,%d\n", yyget_text(yyscanner), strlen(yyget_text(yyscanner)))*/
%}

DIGIT   [0-9]
LETTER  [A-Za-z0-9]
SPACE   [ \t]
%%

{DIGIT}+ { CALL_YYP(INTEGER, yyget_text(yyscanner));DEBUG_TOKEN(); }
\+ { CALL_YYP(PLUS, "+");DEBUG_TOKEN(); }

%%
/* This section is customize definition */
int yywrap (yyscan_t yyscanner ){
  return 1;
}

void leleEvalString(const char* src) {
  void* scanner; /* yyscan_t */
  YY_BUFFER_STATE lexBuf;
  void* parser;
  void* vm; /* script lang vm */
  struct LexExtra lexCont;
  int err;

  /*Init lex&parse&script */
  yylex_init( &scanner );
  lexBuf = yy_scan_string(src, scanner);
  yy_switch_to_buffer(lexBuf, scanner);

  parser = p2aAlloc(malloc);
  lexCont.parser = parser;

  vm = scriptInit(&err);
  if (0 != err) {
    puts("Script language is error");
    goto ERR_VM;
  }
  lexCont.vm = vm;

  /*lex drive loop, parse end*/
  yyset_extra(&lexCont, scanner);
  yylex(scanner);
  p2a(parser, 0, 0, vm);

ERR_VM:
  /*Clean script&parse&lex */
  scriptClean(vm);
  p2aFree(parser, free);
  yy_delete_buffer(lexBuf, scanner);
  yylex_destroy(scanner);
}

@


1.7
log
@UPDATE: move pasre and script function into lex, use parse string instead of file. and export parse string entry
@
text
@d56 1
a56 1
  vm = scriptInit("script.lua", &err);
@


1.6
log
@UPDATE: show token len, for space ambigus
@
text
@d10 6
d35 1
d39 37
@


1.5
log
@UPDATE: change script function name
@
text
@d17 1
a17 1
/*printf("Lex str is %s\n", yyget_text(yyscanner))*/
@


1.4
log
@UPDATE: make dynamic language reentrant
@
text
@d14 1
a14 1
        p2aPush(dynVm, major, minor);\
@


1.3
log
@UPDATE: improve comment
@
text
@d11 5
a15 3
        p2aPush(major, minor);\
        void*yyp=yyget_extra(yyscanner);\
        p2a(yyp, major, minor)
d25 2
a26 2
{DIGIT}+ {DEBUG_TOKEN();CALL_YYP(INTEGER, yyget_text(yyscanner));}
\+ {DEBUG_TOKEN();CALL_YYP(PLUS, "+");}
@


1.2
log
@UPDATE: support script call
@
text
@d10 5
a14 2
#define CALL_YYP(major, minor) p2aPush(major, minor);void*yyp=yyget_extra(yyscanner);p2a(yyp, major, minor)
#define DEBUG_TOKEN()
@


1.1
log
@INSERT: initial upload
@
text
@d10 3
a12 3
#define CP_YYTEXT(val) val=(char*)calloc(yyleng+1, 1);strncpy(val, yytext, yyleng)
#define CALL_YYP(major, minor) void*yyp=yyget_extra(yyscanner);p2a(yyp, major, minor)
#define DEBUG_TOKEN() printf("Lex str is %s\n", yyget_text(yyscanner))
d19 4
a22 2
{DIGIT}+ {DEBUG_TOKEN();CALL_YYP(INTEGER, atoi(yyget_text(yyscanner)));}
\+ {DEBUG_TOKEN();CALL_YYP(PLUS, 0);}
a23 1

@

