head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2018.07.22.13.18.53;	author Administrator;	state Exp;
branches;
next	1.5;

1.5
date	2018.07.22.07.57.04;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2018.07.22.07.41.02;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2018.07.22.03.39.48;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2018.06.17.11.38.09;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2018.06.17.10.26.34;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.6
log
@UPDATE: change syntax error message
@
text
@%name p2a
%token_type {char*}
%extra_argument {void *dynVm}

%left PLUS MINUS.
%left DIVIDE TIMES.

%include {
#include <string.h>
#include "assert.h"
void scriptReduce(void* vm, int action);
#define CALL_YYR(act) scriptReduce(dynVm, act)
}

%syntax_error {
  printf("Syntax error! Token Type:%d(Ref to parse.h), Token Value:%s\n", yymajor, yyminor);
}

program ::= expr(A).   { printf( "Result=%s\n", A); }

expr ::= expr PLUS expr.   { CALL_YYR(0); }

expr(A) ::= INTEGER(B). { strcmp(A, B); CALL_YYR(0); }
@


1.5
log
@UPDATE: slash dummy space
@
text
@d16 1
a16 1
  printf("Syntax error!major:%d, minor:%s\n", yymajor, yyminor);
@


1.4
log
@UPDATE: change script function name
@
text
@d15 3
a17 3
 %syntax_error {
   printf("Syntax error!major:%d, minor:%s\n", yymajor, yyminor);
 }
d19 1
a19 1
 program ::= expr(A).   { printf( "Result=%s\n", A); }
d21 1
a21 1
 expr ::= expr PLUS expr.   { CALL_YYR(0); }
d23 1
a23 1
 expr(A) ::= INTEGER(B). { strcmp(A, B); CALL_YYR(0); }
@


1.3
log
@UPDATE: make dynamic language reentrant
@
text
@d11 2
a12 1
void p2aReduce(void* vm, int action);
d21 1
a21 1
 expr ::= expr PLUS expr.   { p2aReduce(dynVm, 0); }
d23 1
a23 1
 expr(A) ::= INTEGER(B). { strcmp(A, B); p2aReduce(dynVm, 0); }
@


1.2
log
@UPDATE: support script call
@
text
@d1 1
d3 1
a3 1
%name p2a
d9 1
d11 1
a11 1
void p2aReduce(int action);
d20 1
a20 1
 expr ::= expr PLUS expr.   { p2aReduce(0); }
d22 1
a22 1
 expr(A) ::= INTEGER(B). { strcmp(A, B); p2aReduce(0); }
@


1.1
log
@INSERT: initial upload
@
text
@d1 1
a1 1
%token_type {int}
d9 1
d13 1
a13 1
   printf("Syntax error!major:%d, minor:%d\n", yymajor, yyminor);
d16 1
a16 1
 program ::= expr(A).   { printf( "Result=%d\n", A); }
d18 1
a18 11
 expr(A) ::= expr(B) MINUS  expr(C).   { A = B - C; }
 expr(A) ::= expr(B) PLUS  expr(C).   { A = B + C; printf("meet plus %d\n", A);}
 expr(A) ::= expr(B) TIMES  expr(C).   { A = B * C; }
 expr(A) ::= expr(B) DIVIDE expr(C).  {

         if(C != 0){
            A = B / C;
         }else{
            puts( "divide by zero");
          }
       }  /* end of DIVIDE */
d20 1
a20 1
 expr(A) ::= INTEGER(B). { A = B; printf("get input token %d\n", A);}
@

