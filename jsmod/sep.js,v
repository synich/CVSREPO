head	1.13;
access;
symbols;
locks; strict;
comment	@# @;


1.13
date	2024.12.16.15.30.48;	author shuw;	state Exp;
branches;
next	1.12;

1.12
date	2024.12.13.16.33.39;	author shuw;	state Exp;
branches;
next	1.11;

1.11
date	2024.12.02.16.20.15;	author shuw;	state Exp;
branches;
next	1.10;

1.10
date	2024.12.02.15.04.32;	author u0_a157;	state Exp;
branches;
next	1.9;
commitid	100674DCC8046584A27;

1.9
date	2024.11.27.16.00.44;	author shuw;	state Exp;
branches;
next	1.8;

1.8
date	2024.09.30.13.49.49;	author shuw;	state Exp;
branches;
next	1.7;

1.7
date	2024.09.28.15.35.15;	author shuw;	state Exp;
branches;
next	1.6;

1.6
date	2024.06.15.14.17.43;	author shuw;	state Exp;
branches;
next	1.5;

1.5
date	2024.06.13.16.22.44;	author shuw;	state Exp;
branches;
next	1.4;

1.4
date	2024.06.13.15.59.30;	author shuw;	state Exp;
branches;
next	1.3;

1.3
date	2023.04.29.05.25.26;	author u0_a111;	state Exp;
branches;
next	1.2;
commitid	100644CAA4632190F2E;

1.2
date	2023.03.07.16.58.17;	author u0_a111;	state Exp;
branches;
next	1.1;
commitid	10064076D2912A0B952;

1.1
date	2023.02.13.16.04.59;	author u0_a111;	state Exp;
branches;
next	;
commitid	10063EA5FAB589ACC64;


desc
@@


1.13
log
@feat: remove vue, add scan
@
text
@/*241216;global 'W' as entry*/
!(function(top){
top.W||(top.W={});"use strict"
// scan DOM elem and return vm of it. get/set as func, ".o/tog/disp/vis" handy func
function observe(elemId){
  if (typeof elemId == "string"){
    let eid = elemId[0]==='#' ? elemId.slice(1) : elemId;
    var elem = document.getElementById(eid);
    if (elem === null) {alert(`id[${elemId}] not exist`);return}
  } else {var elem = elemId}
  var st = new Set(["INPUT","TEXTAREA","SELECT"]);
  var ndCh = st.has(elem.nodeName)?'v':'i';//value or innerHTML
  var ret = function(val){
    if (val===undefined){return ndCh=='v'?elem.value:elem.innerHTML}
    else {ndCh=='v'?elem.value=val:elem.innerHTML=val; return ret}
  }
  ret.o = elem; ret.tog = (n)=>{elem.classList.toggle(n)}
  ret.disp = (s)=>{elem.style.display=s}; ret.vis = (b)=>{elem.style.visibility = b?"visible":"hidden"}
  return ret
}
function _attr_bind(node, vm){
  Array.from(node.childNodes).forEach(_n => {
    if (1==_n.nodeType){ _a = _n.getAttribute("db")
      if (_a) { _a.split(',').forEach(function(_db){
        let _b = _db.split(':')
        if ("el"==_b[0]) {vm[_b[1]]=observe(_n)}
        else if ("fn"==_b[0]) { let ev = _n.nodeName=="SELECT"?'change':'input'
          _n.addEventListener(ev,
            (e)=>{vm[_b[1]](e.target.value, vm)})
        }
      })
    }
    if (_n.childNodes) {_attr_bind(_n, vm)}
    }
  })
}
function scan(elemId){
  var eid = elemId[0]==='#' ? elemId.slice(1) : elemId;
  var vm = window[eid] = {}
  _attr_bind(document.getElementById(eid), vm)
}
// ajax  data:json object, cb_func(resp:str, status:200,403,etc)
function ajax(method, url, data, cb_func, timeout = 10000) {
  function encodeParams(params) {
    return Object.keys(params)
      .map(key => encodeURIComponent(key) + "=" + encodeURIComponent(params[key]))
      .join("&");
  }
  method = method.toUpperCase();
  if (data) { data = encodeParams(data); }
  if (method === "GET" && data) { url=`${url}?${data}`; data = null; }

  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true); // async true
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  var timer = setTimeout(function() {
    xhr.abort();
    cb_func(`ERROR: Request timeout ${timeout}ms`, 408); // 408: Request Timeout
    }, timeout);
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) { // Request is complete
      clearTimeout(timer);
      cb_func(xhr.responseText, xhr.status);
    }
  };
  if (data) { xhr.send(data); }
  else      { xhr.send();  }
}
function awax(method, url, data, timeout = 10000) {
  return new Promise( (resolve,reject)=>{ajax(method, url, data, (resp, st)=>{
    if (st>=300 || st<200){reject(resp)}
    else{resolve(resp)} }, timeout)}
)}
// take from htmx
function hxdom(method, url, id_elem, target, opt={}, timeout=10000) {
  function _subdom(resp, code){
	if (code >=300 || code <200) {alert(resp)}
	var swap = opt["swap"];
	if (swap){  let ori = observe(target)();//before | after | delete
	  if ("b"==swap[0]){observe(target)(resp+ori)}
	  else if("a"==swap[0]){observe(target)(ori+resp)}
	  else {observe(target)("")}
	}else {observe(target)(resp)}
  }  var data={};
  if (id_elem) {
    var a_in=id_elem.replace(/\s+/g, "").split(",");
    for (let k of a_in){let e = observe(k);let n=e.o.getAttribute("name");n=n?n:k; data[n]=e()}
  } ajax(method, url, data, _subdom, timeout);
}
// export function
top.W.observe=observe; top.W.scan=scan
top.W.ajax=ajax; top.W.awax=awax
top.W.hxdom=hxdom
})(this);
@


1.12
log
@ready rewrite mel.css
@
text
@d1 1
a1 1
/*241210;global 'W' as entry*/
d4 1
a4 179
// mimic Vue2
class Watcher{
	constructor(vm,expr,cb){
		this.vm = vm; this.expr = expr; this.cb = cb; this.value = this.get()
	}
// @@ multiplexing compile.js => getVal() and external exposure.
	getVal(vm,expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	}
	get(){
		Dep.target = this
		let value = this.getVal(this.vm, this.expr)
		Dep.target = null
		return value
	}
	update(){
		let newValue = this.getVal(this.vm, this.expr)
		this.cb(newValue)
	}
}
// @@ Data hijacking, It is mainly responsible for data response of data objects.
class Observer{
	constructor(data){
		this.observe(data)
	}
	observe(data){
		if(!data || typeof data !== 'object'){return;}
		Object.keys(data).forEach(key => {
			this.defineReactive(data, key, data[key])
			this.observe(data[key])
		})
	}
	defineReactive(obj, key, value){
		let that = this
		let dep = new Dep()
		Object.defineProperty(obj, key, {
			enumerable: true,
			configurable: true,
				get(){
					Dep.target && dep.addSub(Dep.target)
					return value
				},
				set(newValue){
					if(newValue != value){
					that.observe(newValue)
					value = newValue
					dep.notify()
				}
			}
		})
	}
}
// @@ Trigger monitor (publish subscription)
class Dep{
	constructor(){
		this.subs = []
	}
	addSub(watcher){
		this.subs.push(watcher)
	}
	notify(){
		this.subs.forEach(watcher => watcher.update())
	}
}
// @@ Template compilation, Move page elements into memory for work
class Compile {
	constructor(el, vm){
		this.el = (typeof el=="string" ? document.querySelector(el) : el)
		this.vm = vm
		if(this.el){
			let fragment = this.node2fragment(this.el)
			this.compile(fragment)
			this.el.appendChild(fragment)
		}
	}
// @@ Assist compile to complete the work (weight: core)
// These functions complete the work of moving into memory, compiling elements, compiling text and so on.
	compileElement(node){
		let attrs = node.attributes
		Array.from(attrs).forEach(attr => {
		let attrName = attr.name
			if(this.isDirective(attrName)){
				let expr = attr.value
				let [,type] = attrName.split('-')
				CompileUtil[type](node, this.vm, expr)
			}
		})
	}
	compileText(node){
		let expr = node.textContent
		let reg = /\{\{([^}]+)\}\}/g
		if(reg.test(expr)){
			CompileUtil['text'](node, this.vm, expr)
		}
	}
	node2fragment(el){
		let fragment = document.createDocumentFragment()
		let firstChild
		while(firstChild = el.firstChild){
			fragment.appendChild(firstChild)
		}
		return fragment
	}
	compile(fragment){
		let childNodes = fragment.childNodes
		Array.from(childNodes).forEach(node => {
			if(1 == node.nodeType){ // 1 is Element
				this.compileElement(node)
				this.compile(node)
			}else{
				this.compileText(node)
			}
		})
	}
	isDirective(name){
		return name.includes('v-model')
	}
}
CompileUtil = {
	getVal(vm, expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	},
	getTextVal(vm, expr, node){
		return expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1, ofs) => {
			let val = this.getVal(vm, mat1)
			let vfn = node.parentNode.getAttribute("v-fn")
			// function over v-model, only run first time
			if (vfn){if(0==ofs) return vm.$fn[vfn](val, vm.$data);else return ''}
			else return val
		})
	},
	text(node, vm, expr){
		let updateFn = (node, value)=>{node.textContent = value}
		let value = this.getTextVal(vm, expr, node)
		expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1) => {
			new Watcher(vm, mat1, (newValue) => {
				updateFn(node, this.getTextVal(vm, expr, node))
			})
		})
		updateFn(node, value)
	},
	setVal(vm, expr, value){
		expr = expr.split('.')
		return expr.reduce((prev, next, currentIndex) => {
			if(currentIndex === expr.length -1){
				return prev[next] = value
			}
			return prev[next]
		},vm.$data)
	},
	model(node, vm, expr){
		let updateFn = (node, value)=>{node.value = value}
		new Watcher(vm, expr, (newValue) => {
			updateFn(node, this.getVal(vm,expr))
		})
		node.addEventListener('input', (e) => {
			let newValue = e.target.value
			this.setVal(vm, expr, newValue)
		})
		updateFn(node, this.getVal(vm,expr))
	}
}
class miniVM{
	constructor(options){
		this.$el = options.el; this.$data = options.data
		this.$fn = options.fn // my extension for custom logic
		if(this.$el){// only the template exist and compile it
			new Observer(this.$data)
			new Compile(this.$el, this)
		}
	}
}
// wrap DOM elem get/set as func, ".o" is original DOM elem
d6 5
a10 3
  var eid = elemId[0]==='#' ? elemId.slice(1) : elemId;
  var elem = document.getElementById(eid);
  if (elem === null) {alert(`id[${elemId}] not exist`);return}
d17 2
a18 1
  ret.o = elem;
d21 21
d91 2
a92 4
top.W.vue=miniVM;
top.W.observe=observe;
top.W.ajax=ajax;
top.W.awax=awax;
@


1.11
log
@feat: observe accept # in sep.js
@
text
@d1 1
a1 1
/*241202;global 'W' as entry*/
d241 1
a241 1
    for (let k of a_in){let e = observe(k);let n=e.o.getAttribute("name"); if(n){data[n]=e()} }
@


1.10
log
@feat: awax in sep.js
@
text
@d1 250
a250 250
/*241202;global 'W' as entry*/
!(function(top){
top.W||(top.W={});"use strict"
// mimic Vue2
class Watcher{
	constructor(vm,expr,cb){
		this.vm = vm; this.expr = expr; this.cb = cb; this.value = this.get()
	}
// @@ multiplexing compile.js => getVal() and external exposure.
	getVal(vm,expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	}
	get(){
		Dep.target = this
		let value = this.getVal(this.vm, this.expr)
		Dep.target = null
		return value
	}
	update(){
		let newValue = this.getVal(this.vm, this.expr)
		this.cb(newValue)
	}
}
// @@ Data hijacking, It is mainly responsible for data response of data objects.
class Observer{
	constructor(data){
		this.observe(data)
	}
	observe(data){
		if(!data || typeof data !== 'object'){return;}
		Object.keys(data).forEach(key => {
			this.defineReactive(data, key, data[key])
			this.observe(data[key])
		})
	}
	defineReactive(obj, key, value){
		let that = this
		let dep = new Dep()
		Object.defineProperty(obj, key, {
			enumerable: true,
			configurable: true,
				get(){
					Dep.target && dep.addSub(Dep.target)
					return value
				},
				set(newValue){
					if(newValue != value){
					that.observe(newValue)
					value = newValue
					dep.notify()
				}
			}
		})
	}
}
// @@ Trigger monitor (publish subscription)
class Dep{
	constructor(){
		this.subs = []
	}
	addSub(watcher){
		this.subs.push(watcher)
	}
	notify(){
		this.subs.forEach(watcher => watcher.update())
	}
}
// @@ Template compilation, Move page elements into memory for work
class Compile {
	constructor(el, vm){
		this.el = (typeof el=="string" ? document.querySelector(el) : el)
		this.vm = vm
		if(this.el){
			let fragment = this.node2fragment(this.el)
			this.compile(fragment)
			this.el.appendChild(fragment)
		}
	}
// @@ Assist compile to complete the work (weight: core)
// These functions complete the work of moving into memory, compiling elements, compiling text and so on.
	compileElement(node){
		let attrs = node.attributes
		Array.from(attrs).forEach(attr => {
		let attrName = attr.name
			if(this.isDirective(attrName)){
				let expr = attr.value
				let [,type] = attrName.split('-')
				CompileUtil[type](node, this.vm, expr)
			}
		})
	}
	compileText(node){
		let expr = node.textContent
		let reg = /\{\{([^}]+)\}\}/g
		if(reg.test(expr)){
			CompileUtil['text'](node, this.vm, expr)
		}
	}
	node2fragment(el){
		let fragment = document.createDocumentFragment()
		let firstChild
		while(firstChild = el.firstChild){
			fragment.appendChild(firstChild)
		}
		return fragment
	}
	compile(fragment){
		let childNodes = fragment.childNodes
		Array.from(childNodes).forEach(node => {
			if(1 == node.nodeType){ // 1 is Element
				this.compileElement(node)
				this.compile(node)
			}else{
				this.compileText(node)
			}
		})
	}
	isDirective(name){
		return name.includes('v-model')
	}
}
CompileUtil = {
	getVal(vm, expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	},
	getTextVal(vm, expr, node){
		return expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1, ofs) => {
			let val = this.getVal(vm, mat1)
			let vfn = node.parentNode.getAttribute("v-fn")
			// function over v-model, only run first time
			if (vfn){if(0==ofs) return vm.$fn[vfn](val, vm.$data);else return ''}
			else return val
		})
	},
	text(node, vm, expr){
		let updateFn = (node, value)=>{node.textContent = value}
		let value = this.getTextVal(vm, expr, node)
		expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1) => {
			new Watcher(vm, mat1, (newValue) => {
				updateFn(node, this.getTextVal(vm, expr, node))
			})
		})
		updateFn(node, value)
	},
	setVal(vm, expr, value){
		expr = expr.split('.')
		return expr.reduce((prev, next, currentIndex) => {
			if(currentIndex === expr.length -1){
				return prev[next] = value
			}
			return prev[next]
		},vm.$data)
	},
	model(node, vm, expr){
		let updateFn = (node, value)=>{node.value = value}
		new Watcher(vm, expr, (newValue) => {
			updateFn(node, this.getVal(vm,expr))
		})
		node.addEventListener('input', (e) => {
			let newValue = e.target.value
			this.setVal(vm, expr, newValue)
		})
		updateFn(node, this.getVal(vm,expr))
	}
}
class miniVM{
	constructor(options){
		this.$el = options.el; this.$data = options.data
		this.$fn = options.fn // my extension for custom logic
		if(this.$el){// only the template exist and compile it
			new Observer(this.$data)
			new Compile(this.$el, this)
		}
	}
}
// wrap DOM elem get/set as func, ".o" is original DOM elem
function observe(elemId){
  var elem = document.getElementById(elemId);
  if (elem === null) {alert(`id[${elemId}] not exist`);return}
  var st = new Set(["INPUT","TEXTAREA","SELECT"]);
  var ndCh = st.has(elem.nodeName)?'v':'i';//value or innerHTML
  var ret = function(val){
    if (val===undefined){return ndCh=='v'?elem.value:elem.innerHTML}
    else {ndCh=='v'?elem.value=val:elem.innerHTML=val; return ret}
  }
  ret.o = elem;
  return ret
}
// ajax  data:json object, cb_func(resp:str, status:200,403,etc)
function ajax(method, url, data, cb_func, timeout = 10000) {
  function encodeParams(params) {
    return Object.keys(params)
      .map(key => encodeURIComponent(key) + "=" + encodeURIComponent(params[key]))
      .join("&");
  }
  method = method.toUpperCase();
  if (data) { data = encodeParams(data); }
  if (method === "GET" && data) { url=`${url}?${data}`; data = null; }

  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true); // async true
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  var timer = setTimeout(function() {
    xhr.abort();
    cb_func(`ERROR: Request timeout ${timeout}ms`, 408); // 408: Request Timeout
    }, timeout);
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) { // Request is complete
      clearTimeout(timer);
      cb_func(xhr.responseText, xhr.status);
    }
  };
  if (data) { xhr.send(data); }
  else      { xhr.send();  }
}
function awax(method, url, data, timeout = 10000) {
  return new Promise( (resolve,reject)=>{ajax(method, url, data, (resp, st)=>{
    if (st>=300 || st<200){reject(resp)}
    else{resolve(resp)} }, timeout)}
)}
// take from htmx
function hxdom(method, url, id_elem, target, opt={}, timeout=10000) {
  function _subdom(resp, code){
	if (code >=300 || code <200) {alert(resp)}
	var eid = target[0]==='#' ? target.slice(1) : target;
	var elem = document.getElementById(eid);
	var swap = opt["swap"];
	if (swap){  let ori = observe(eid)();//before | after | delete
	  if ("b"==swap[0]){observe(eid)(resp+ori)}
	  else if("a"==swap[0]){observe(eid)(ori+resp)}
	  else {observe(eid)("")}
	}else {observe(eid)(resp)}
  }
  var a_in=id_elem.replace(/\s+/g, "").split(","); var data={};
  for (let k of a_in){let e = observe(k);let n=e.o.getAttribute("name"); if(n){data[n]=e()} }
  ajax(method, url, data, _subdom, timeout);
}
// export function
top.W.vue=miniVM;
top.W.observe=observe;
top.W.ajax=ajax;
top.W.awax=awax;
top.W.hxdom=hxdom
})(this);
@



1.9
log
@feat:tiny vue2 in sep
@
text
@d1 1
a1 1
/*241127;global 'W' as entry*/
d7 1
a7 3
		this.vm = vm; this.expr = expr; this.cb = cb
		// Please don't abandon old value?
		this.value = this.get()
d9 1
a9 2
// @@ multiplexing compile.js => getVal()
// And external exposure.
a61 1
		// Where do subscribers put it?
d222 5
d248 1
@


1.8
log
@feat: hxdom support swap
@
text
@d1 1
a1 1
/*240930;global 'W' as entry*/
d3 183
a185 1
top.W||(top.W={})
d227 1
a227 1
top.W.hxdom=function(method, url, id_elem, target, opt={}, timeout=10000) {
d243 2
d247 1
@


1.7
log
@feat: hxdom in jsmod
@
text
@d1 1
a1 1
/*240928;global 'W' as entry*/
d45 1
a45 1
top.W.hxdom=function(method, url, data, target, opt={}, timeout=10000) {
d50 6
a55 1
	observe(eid)(resp);
d57 2
@


1.6
log
@fix: GET url forgot to set
@
text
@d1 1
a1 1
/*240615;global 'W' as entry*/
d5 1
a5 1
top.W.observe=function(elemId){
d18 1
a18 1
top.W.ajax=function(method, url, data, cb_func, timeout = 10000) {
d37 1
a37 1
      clearTimeout(timer); // Clear timer
d44 12
@


1.5
log
@fix: some small tune on ajax
@
text
@d1 1
a1 1
/*240614;global 'W' as entry*/
d7 1
a7 1
  if (elem === null) {alert(elemId+' not exist');return}
a24 3
  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true); // async true

a26 3
  if (method === "POST") {
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  }
d28 3
@


1.4
log
@remove psquery dependency
@
text
@d1 1
a1 1
/*240613;global 'W' as entry*/
d24 1
d26 1
a26 1
  xhr.open(method, url, true);
a27 1
  method = method.toUpperCase();
d29 1
a29 3
  if (method === "GET") {
    url += "?" + data; data = null;
  }
d36 2
a37 2
    cb_func({ error: "Request timed out" }, 408); // 408: Request Timeout
  }, timeout);
d40 1
a40 1
      clearTimeout(timer); // Clear the timeout
@


1.3
log
@feat: add get into sep.js
@
text
@d1 1
a1 1
/*230429;global 'W' as entry;dep on psquery*/
d4 1
a4 1
// wrap DOM elem easy access
d17 31
a47 7
// data: json; fn(resp:str=http_body, status:str='success', xhr:object)
top.W.post=function(url, data, fn){if (!typeof $)return;
  var dstr='';for(k in data){if(dstr==''){dstr=`${k}=${encodeURIComponent(data[k])}`}else{dstr=dstr+`&${k}=${encodeURIComponent(data[k])}`}}
  $.ajax({type:"POST", url:url, data:dstr, success: fn})
}
top.W.get=function(url, fn){if (!typeof $)return;
  $.ajax({url:url, success: fn})
@


1.2
log
@feat: embed observe and post into dict
@
text
@d1 1
d17 1
a17 1
// fn(resp:str=http_body, status:str='success', xhr:object)
d22 4
a25 1
})(this)
@


1.1
log
@js observe
@
text
@d1 2
d4 1
a4 1
function observe(elemId){
d11 1
a11 2
    else {ndCh=='v'?elem.value=val:elem.innerHTML=val}
    return elem
d16 6
a21 1

@

