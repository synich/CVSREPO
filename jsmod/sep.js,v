head	1.28;
access;
symbols;
locks; strict;
comment	@# @;


1.28
date	2025.03.02.15.23.16;	author u0_a157;	state Exp;
branches;
next	1.27;
commitid	10067C477E47E1621C4;

1.27
date	2025.02.28.14.35.27;	author u0_a157;	state Exp;
branches;
next	1.26;
commitid	10067C1C9AF669BC111;

1.26
date	2025.02.27.14.06.40;	author u0_a157;	state Exp;
branches;
next	1.25;
commitid	10067C071707EA0481B;

1.25
date	2025.02.21.16.01.45;	author u0_a157;	state Exp;
branches;
next	1.24;
commitid	10067B8A3693AAB588C;

1.24
date	2025.02.14.15.25.28;	author u0_a157;	state Exp;
branches;
next	1.23;
commitid	10067AF60687DFBCEE3;

1.23
date	2025.02.14.15.20.59;	author u0_a157;	state Exp;
branches;
next	1.22;
commitid	10067AF5F5B6681CAFF;

1.22
date	2025.01.12.16.02.05;	author shuw;	state Exp;
branches;
next	1.21;

1.21
date	2025.01.10.15.59.42;	author shuw;	state Exp;
branches;
next	1.20;

1.20
date	2025.01.03.15.03.08;	author u0_a157;	state Exp;
branches;
next	1.19;
commitid	1006777FC2C531BC7AF;

1.19
date	2025.01.01.15.49.31;	author u0_a157;	state Exp;
branches;
next	1.18;
commitid	1006775640B739819FF;

1.18
date	2024.12.31.15.05.35;	author synich;	state Exp;
branches;
next	1.17;
commitid	PndAknkfwWGijFDF;

1.17
date	2024.12.31.02.37.49;	author u0_a157;	state Exp;
branches;
next	1.16;
commitid	100677358FD291AD36E;

1.16
date	2024.12.29.14.56.56;	author shuw;	state Exp;
branches;
next	1.15;

1.15
date	2024.12.28.07.06.08;	author shuw;	state Exp;
branches;
next	1.14;

1.14
date	2024.12.22.15.26.54;	author shuw;	state Exp;
branches;
next	1.13;

1.13
date	2024.12.16.15.30.48;	author shuw;	state Exp;
branches;
next	1.12;

1.12
date	2024.12.13.16.33.39;	author shuw;	state Exp;
branches;
next	1.11;

1.11
date	2024.12.02.16.20.15;	author shuw;	state Exp;
branches;
next	1.10;

1.10
date	2024.12.02.15.04.32;	author u0_a157;	state Exp;
branches;
next	1.9;
commitid	100674DCC8046584A27;

1.9
date	2024.11.27.16.00.44;	author shuw;	state Exp;
branches;
next	1.8;

1.8
date	2024.09.30.13.49.49;	author shuw;	state Exp;
branches;
next	1.7;

1.7
date	2024.09.28.15.35.15;	author shuw;	state Exp;
branches;
next	1.6;

1.6
date	2024.06.15.14.17.43;	author shuw;	state Exp;
branches;
next	1.5;

1.5
date	2024.06.13.16.22.44;	author shuw;	state Exp;
branches;
next	1.4;

1.4
date	2024.06.13.15.59.30;	author shuw;	state Exp;
branches;
next	1.3;

1.3
date	2023.04.29.05.25.26;	author u0_a111;	state Exp;
branches;
next	1.2;
commitid	100644CAA4632190F2E;

1.2
date	2023.03.07.16.58.17;	author u0_a111;	state Exp;
branches;
next	1.1;
commitid	10064076D2912A0B952;

1.1
date	2023.02.13.16.04.59;	author u0_a111;	state Exp;
branches;
next	;
commitid	10063EA5FAB589ACC64;


desc
@@


1.28
log
@fix: trigger event when set input
@
text
@/*250302;SEP entry*/
// Util: jq, ajax, awax, hxdom
// DOM&UI: ko, render(ko.$pen)
// ko: receive top elem id, return vm with all elems(include top itself) who has db attr
!(function(top){"use strict";
const SEP="W";var _G;top[SEP]||(_G=top[SEP]={});
// scan DOM elem and return vm of it. get/set as func, ".o/tog/disp/vis" handy func
function _get_el(elemId){
  var el = elemId;
  if (typeof elemId == "string"){
    let eid = elemId[0]==='#' ? elemId.slice(1) : elemId;
    el = document.getElementById(eid);
    if (el===null) {alert(`id[${elemId}] not exist`)}
  }
  return el
}
function jq(elemId){
  var el = _get_el(elemId);
  var st = new Set(["INPUT","TEXTAREA","SELECT"]);
  var ndCh = st.has(el.nodeName)?'v':'i';//value or innerHTML
  var ret = function(val){
    if (val===undefined){return ndCh=='v'?el.value:el.innerHTML}
    else {if(ndCh=='v'){el.value=val;let ev=el.nodeName=="SELECT"?"change":"input";el.dispatchEvent(new Event(ev,{bubbles: true}))}
          else{el.innerHTML=val}; return ret}
  };
  ret.o = el;
  ret.on = (ev, fn, p)=>{el.addEventListener(ev, p?fn.bind(null, p) :fn)};
  ret.tog = (n)=>{el.classList.toggle(n)};
  ret.disp = (s)=>{el.style.display=s};
  ret.vis = (b)=>{el.style.visibility = b?"visible":"hidden"};
  return ret
}
// take React
function isPlainObject(target){ return Object.prototype.toString.call(target) === '[object Object]' }
function createElement(tag, props, ...children){
  return {
    tag, props,
    children: children.reduce((array, child) =>  {
      if (Array.isArray(child)) {
        array = array.concat(child)
      } else {
        array.push(isPlainObject(child) ? child: new String(child))
      }
      return array
    }, [])
  }
}
function vdom2dom(vdom){
  let dom = null;
  if (isPlainObject(vdom)) {
    let {tag, props = {}, children = []} = vdom;
    if (typeof tag ==="function") {
		let v = tag(props); //必须传入props
		tag = v.tag; props = v.props; children = v.children;
    }
    dom = document.createElement(tag);
    Object.keys(props || []).forEach(key=>{ dom.setAttribute(key, props[key]) } );//不能绑on事件，className特例
    (children || []).forEach(child => {
      dom.appendChild(vdom2dom(child))
    })
  } else {
    dom = document.createTextNode(vdom)
  }
  return dom
}
function render(vdom, p){
  let dom = vdom2dom(vdom);
  if (p.firstChild) {
    p.replaceChild(dom, p.firstChild)
  } else {
    p.appendChild(dom)
  }
}
// take knockout
function _do_attr(_n, vm){
  let _a = _n.getAttribute("db");
  if (_a) {
    _a.split(',').forEach(function(_db){
    let _b = _db.split(':');
    if ("el"==_b[0]) {vm[_b[1]]=jq(_n)}
    else if ("fn"==_b[0]) {
      let ev='input',dly=250;
      if(_n.nodeName=="SELECT"){ev='change';dly=1}
      else if(_n.nodeName=="BUTTON"){ev='click';dly=1}
      let tmout;
      function _smooth(e) {
        clearTimeout(tmout);
        tmout=setTimeout((e)=>{vm[_b[1]](e.target.value, vm)}, dly, e)}
    _n.addEventListener(ev, _smooth)
    }
  })
}}
function _attr_bind(node, vm){
  Array.from(node.childNodes).forEach(_n=>{
    if (1==_n.nodeType){
      _do_attr(_n, vm);
      if (_n.childNodes) {_attr_bind(_n, vm)}
    }
  })
}
function ko(tEId){
  let node=_get_el(tEId),vm={};
  _do_attr(node, vm);_attr_bind(node, vm);
  vm.$root=jq(node);
  vm.$pen=function(vdom, id){let n=id?vm[id].o:this.$root.o;render(vdom, n);_attr_bind(n, this);return this};
  return vm
}
// ajax  data:json object, cb_func(resp:str, status:200,403,etc)
function ajax(method, url, data, cb_func, timeout=10000) {
  function encodeParams(p) {
    let _c= (key)=>`${encodeURIComponent(key)}=${encodeURIComponent(p[key])}`;
    return Object.keys(p).map(_c).join("&")
  }
  let use_json=0;
  method = method.toUpperCase();
  if (method=="POSTJ"){method="POST";use_json=1}
  if (data) {
    if (use_json===0) { data = encodeParams(data)}
    else {data = JSON.stringify(data)}
  }
  if (method === "GET" && data) { url=`${url}?${data}`; data = null }

  let xhr = new XMLHttpRequest();
  xhr.open(method, url, true);// async true
  xhr.setRequestHeader("Content-Type", use_json===0?"application/x-www-form-urlencoded":"application/json");
  let timer = setTimeout(function() {
    xhr.abort();
    cb_func(`ERROR: Request timeout ${timeout}ms`, 408)// 408: Timeout
    }, timeout);
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {// Request is complete
      clearTimeout(timer);
      cb_func(xhr.responseText, xhr.status)
    }
  };
  if (data) { xhr.send(data) }
  else      { xhr.send()  }
}
// raise exp when isrej true
function awax(method, url, data, timeout=10000, isrej=false) {
  return new Promise( (resolve,reject)=>{ajax(method, url, data, (resp, st)=>{
    let ok= (st>=200 && st<300)? true: false;
    if(ok){resolve(resp)}
    else{
      if(isrej){reject(resp)} else{resolve(`E${st}: ${resp}`)}
    }
  }, timeout)}
)}
// take from htmx
function _s2el(s){let t=document.createElement("div");t.innerHTML=s;return t.firstChild}
function hxdom(method, url, id_elem, target, opt={}, timeout=10000) {
  function _subdom(resp, code){
    if (code >=300 || code <200) {alert(resp)}
    let swap = opt["swap"];
    if (swap){
      let ori = jq(target).o;//before | after | delete
      if ("b"==swap[0]){ori.insertBefore(_s2el(resp), ori.firstChild)}
      else if("a"==swap[0]){ori.appendChild(_s2el(resp))}
      else {jq(target)("")}
    }else {jq(target)(resp)}
  }
  let data={};
  if (id_elem) {
    if (typeof id_elem =="string") {
      let a_in=id_elem.replace(/\s+/g, "").split(",");
      for (let k of a_in){
        let e = jq(k), n=e.o.getAttribute("name");
        n=n?n:k;
        data[n]=e()
      }
    } else {data=id_elem}
  }
  ajax(method, url, data, _subdom, timeout)
}
// export function
_G.jq=jq;
_G.ko=ko;
_G.ajax=ajax;
_G.awax=awax;
_G.hxdom=hxdom;
top.React={createElement:createElement}
})(this)
@


1.27
log
@fix: INPUT and TEXTAREA both input ev
@
text
@d1 1
a1 1
/*250227;SEP as entry*/
d13 1
a13 1
    if (el === null) {alert(`id[${elemId}] not exist`)}
d23 2
a24 1
    else {ndCh=='v'?el.value=val:el.innerHTML=val; return ret}
d102 1
a102 1
  var node=_get_el(tEId),vm={};
d123 1
a123 1
  var xhr = new XMLHttpRequest();
d126 1
a126 1
  var timer = setTimeout(function() {
d154 1
a154 1
    var swap = opt["swap"];
d162 1
a162 1
  var data={};
d165 1
a165 1
      var a_in=id_elem.replace(/\s+/g, "").split(",");
@


1.26
log
@feat: jsx support db attr and  added in ko
@
text
@d81 3
a83 3
      let ev='click',dly=1;
      if (_n.nodeName=="INPUT"){ev='input';dly=200}
      else if(_n.nodeName=="SELECT"){ev='change'}
d104 1
a104 1
  vm.$pen=function(vdom, id){let n=id?vm[id].o:this.$root.o;render(vdom, n);_attr_bind(n, this)};
@


1.25
log
@feat: unit test with sep.js
@
text
@d1 1
a1 1
/*250219;choose entry with SEP*/
d56 1
a56 1
    Object.keys(props || []).forEach(key => { dom[key] = props[key] });//不能绑on事件，className特例
d81 3
a83 1
      let ev = _n.nodeName=="SELECT"?'change':'input';
d87 1
a87 1
        tmout=setTimeout((e)=>{vm[_b[1]](e.target.value, vm)}, 250, e)}
d100 5
a104 6
function ko(topElmId){
  var node=_get_el(topElmId);
  var vm = {};
  _do_attr(node, vm);
  _attr_bind(node, vm);
  vm.$pen=function(vdom, id){render(vdom, vm[id].o)};
d180 1
a180 1
top.React={createElement:createElement, render:render}
@


1.24
log
@fix: remove log
@
text
@d1 1
a1 1
/*250214;choose entry with SEP*/
d26 1
a26 1
  ret.on = (ev, fn)=>{el.addEventListener(ev, fn)};
d47 1
a47 1
function createDOM(vdom){
d58 1
a58 1
      dom.appendChild(createDOM(child))
d66 1
a66 1
  let dom = createDOM(vdom);
@


1.23
log
@feat: add React and combine with ko
@
text
@a65 1
  console.log("render",vdom,p);
@


1.22
log
@feat: postj in ajax will send json body
@
text
@d1 4
a4 1
/*250112;choose entry with SEP*/
d32 59
d92 1
a92 1
  Array.from(node.childNodes).forEach(_n => {
d94 2
a95 16
      let _a = _n.getAttribute("db");
      if (_a) {
        _a.split(',').forEach(function(_db){
        let _b = _db.split(':');
        if ("el"==_b[0]) {vm[_b[1]]=jq(_n)}
        else if ("fn"==_b[0]) {
            let ev = _n.nodeName=="SELECT"?'change':'input';
            let tmout;
            function _smooth(e) {
              clearTimeout(tmout);
              tmout=setTimeout((e)=>{vm[_b[1]](e.target.value, vm)}, 250, e)}
          _n.addEventListener(ev, _smooth)
        }
      })
    }
    if (_n.childNodes) {_attr_bind(_n, vm)}
d98 3
a100 3
} // take knockout
function ko(elemId){
  var elem=_get_el(elemId);
d102 3
a104 1
  _attr_bind(elem, vm);
d179 2
a180 1
_G.hxdom=hxdom
@


1.21
log
@fix: minijs can deal tab
@
text
@d1 1
a1 1
/*250108;choose entry with SEP*/
d63 1
d65 5
a69 1
  if (data) { data = encodeParams(data) }
d74 1
a74 1
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
@


1.20
log
@fix: variable escape to global
@
text
@d1 125
a125 126
/*250103;choose entry with SEP*/
!(function(top){"use strict";
const SEP="W";var _G;top[SEP]||(_G=top[SEP]={});
// scan DOM elem and return vm of it. get/set as func, ".o/tog/disp/vis" handy func
function _get_el(elemId){
  var el = elemId;
  if (typeof elemId == "string"){
    let eid = elemId[0]==='#' ? elemId.slice(1) : elemId;
    el = document.getElementById(eid);
    if (el === null) {alert(`id[${elemId}] not exist`)}
  }
  return el
}
function jq(elemId){
  var el = _get_el(elemId);
  var st = new Set(["INPUT","TEXTAREA","SELECT"]);
  var ndCh = st.has(el.nodeName)?'v':'i';//value or innerHTML
  var ret = function(val){
    if (val===undefined){return ndCh=='v'?el.value:el.innerHTML}
    else {ndCh=='v'?el.value=val:el.innerHTML=val; return ret}
  };
  ret.o = el;
  ret.on = (ev, fn)=>{el.addEventListener(ev, fn)};
  ret.tog = (n)=>{el.classList.toggle(n)};
  ret.disp = (s)=>{el.style.display=s};
  ret.vis = (b)=>{el.style.visibility = b?"visible":"hidden"};
  return ret
}
function _attr_bind(node, vm){
  Array.from(node.childNodes).forEach(_n => {
    if (1==_n.nodeType){
      let _a = _n.getAttribute("db");
      if (_a) {
        _a.split(',').forEach(function(_db){
        let _b = _db.split(':');
        if ("el"==_b[0]) {vm[_b[1]]=jq(_n)}
        else if ("fn"==_b[0]) {
            let ev = _n.nodeName=="SELECT"?'change':'input';
            let tmout;
            function _smooth(e) {
              clearTimeout(tmout);
              tmout=setTimeout((e)=>{vm[_b[1]](e.target.value, vm)}, 250, e)}
          _n.addEventListener(ev, _smooth)
        }
      })
    }
    if (_n.childNodes) {_attr_bind(_n, vm)}
    }
  })
} // take knockout
function ko(elemId){
  var elem=_get_el(elemId);
  var vm = {};
  _attr_bind(elem, vm);
  return vm
}
// ajax  data:json object, cb_func(resp:str, status:200,403,etc)
function ajax(method, url, data, cb_func, timeout=10000) {
  function encodeParams(p) {
    return Object.keys(p)
      .map(key => encodeURIComponent(key) + "=" + encodeURIComponent(p[key]))
      .join("&")
  }
  method = method.toUpperCase();
  if (data) { data = encodeParams(data) }
  if (method === "GET" && data) { url=`${url}?${data}`; data = null }

  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true);// async true
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  var timer = setTimeout(function() {
    xhr.abort();
    cb_func(`ERROR: Request timeout ${timeout}ms`, 408)// 408: Timeout
    }, timeout);
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {// Request is complete
      clearTimeout(timer);
      cb_func(xhr.responseText, xhr.status)
    }
  };
  if (data) { xhr.send(data) }
  else      { xhr.send()  }
}
// raise exp when isrej true
function awax(method, url, data, timeout=10000, isrej=false) {
  return new Promise( (resolve,reject)=>{ajax(method, url, data, (resp, st)=>{
    let ok= (st>=200 && st<300)? true: false;
    if(ok){resolve(resp)}
    else{
      if(isrej){reject(resp)} else{resolve(`E${st}: ${resp}`)}
    }
  }, timeout)}
)}
// take from htmx
function _s2el(s){let t=document.createElement("div");t.innerHTML=s;return t.firstChild}
function hxdom(method, url, id_elem, target, opt={}, timeout=10000) {
  function _subdom(resp, code){
    if (code >=300 || code <200) {alert(resp)}
    var swap = opt["swap"];
    if (swap){
      let ori = jq(target).o;//before | after | delete
      if ("b"==swap[0]){ori.insertBefore(_s2el(resp), ori.firstChild)}
      else if("a"==swap[0]){ori.appendChild(_s2el(resp))}
      else {jq(target)("")}
    }else {jq(target)(resp)}
  }
  var data={};
  if (id_elem) {
    if (typeof id_elem =="string") {
      var a_in=id_elem.replace(/\s+/g, "").split(",");
      for (let k of a_in){
        let e = jq(k), n=e.o.getAttribute("name");
        n=n?n:k;
        data[n]=e()
      }
    } else {data=id_elem}
  }
  ajax(method, url, data, _subdom, timeout)
}
// export function
_G.jq=jq;
_G.ko=ko;
_G.ajax=ajax;
_G.awax=awax;
_G.hxdom=hxdom
})(this)
@



1.19
log
@feat: minijs appear
@
text
@d1 1
a1 1
/*241231;choose entry with SEP*/
d31 4
a34 2
    if (1==_n.nodeType){ _a = _n.getAttribute("db");
      if (_a) { _a.split(',').forEach(function(_db){
@


1.18
log
@fix: ready for minify
@
text
@d57 3
a59 3
  function encodeParams(params) {
    return Object.keys(params)
      .map(key => encodeURIComponent(key) + "=" + encodeURIComponent(params[key]))
d119 5
a123 1
_G.jq=jq; _G.ko=ko; _G.ajax=ajax; _G.awax=awax; _G.hxdom=hxdom
@


1.17
log
@feat: hxdom can pass object param
@
text
@d1 3
a3 3
/*241229;choose entry with SEP*/
!(function(top){const SEP="W"
"use strict";var _G;top[SEP]||(_G=top[SEP]={})
d6 1
a6 1
  var elem = elemId
d9 4
a12 3
    elem = document.getElementById(eid);
    if (elem === null) {alert(`id[${elemId}] not exist`)}
  } return elem
d15 1
a15 1
  var elem = _get_el(elemId)
d17 1
a17 1
  var ndCh = st.has(elem.nodeName)?'v':'i';//value or innerHTML
d19 8
a26 5
    if (val===undefined){return ndCh=='v'?elem.value:elem.innerHTML}
    else {ndCh=='v'?elem.value=val:elem.innerHTML=val; return ret}
  }
  ret.o = elem; ret.on = (ev, fn)=>{elem.addEventListener(ev, fn)}; ret.tog = (n)=>{elem.classList.toggle(n)}
  ret.disp = (s)=>{elem.style.display=s}; ret.vis = (b)=>{elem.style.visibility = b?"visible":"hidden"}
d31 1
a31 1
    if (1==_n.nodeType){ _a = _n.getAttribute("db")
d33 1
a33 1
        let _b = _db.split(':')
d35 6
a40 3
        else if ("fn"==_b[0]) { let ev = _n.nodeName=="SELECT"?'change':'input'
          let tmout;function _smooth(e) {clearTimeout(tmout)
            tmout=setTimeout((e)=>{vm[_b[1]](e.target.value, vm)}, 250, e)}
d50 4
a53 2
  var elem=_get_el(elemId)
  var vm = {}; _attr_bind(elem, vm); return vm
d60 1
a60 1
      .join("&");
d63 2
a64 2
  if (data) { data = encodeParams(data); }
  if (method === "GET" && data) { url=`${url}?${data}`; data = null; }
d67 1
a67 1
  xhr.open(method, url, true); // async true
d71 1
a71 1
    cb_func(`ERROR: Request timeout ${timeout}ms`, 408); // 408: Request Timeout
d74 1
a74 1
    if (xhr.readyState === 4) { // Request is complete
d76 1
a76 1
      cb_func(xhr.responseText, xhr.status);
d79 2
a80 2
  if (data) { xhr.send(data); }
  else      { xhr.send();  }
d85 6
a90 2
    let ok= (st>=200 && st<300)? true: false
    if(ok){resolve(resp)}else{if(isrej){reject(resp)} else{resolve(`E${st}: ${resp}`)} }}, timeout)}
d96 10
a105 8
	if (code >=300 || code <200) {alert(resp)}
	var swap = opt["swap"];
	if (swap){  let ori = jq(target).o;//before | after | delete
	  if ("b"==swap[0]){ori.insertBefore(_s2el(resp), ori.firstChild)}
	  else if("a"==swap[0]){ori.appendChild(_s2el(resp))}
	  else {jq(target)("")}
	}else {jq(target)(resp)}
  }  var data={};
d109 5
a113 1
      for (let k of a_in){let e = jq(k);let n=e.o.getAttribute("name");n=n?n:k; data[n]=e()}
d115 2
a116 1
  } ajax(method, url, data, _subdom, timeout);
d120 1
a120 1
})(this);
@


1.16
log
@BREAK CHANGE: use W.jq and .ko instead of .observe and .scan
@
text
@d1 1
a1 1
/*241228;choose entry with SEP*/
d3 1
a3 1
"use strict";top[SEP]||(top[SEP]={})
d21 1
a21 1
  ret.o = elem; ret.tog = (n)=>{elem.classList.toggle(n)}
d92 4
a95 2
    var a_in=id_elem.replace(/\s+/g, "").split(",");
    for (let k of a_in){let e = jq(k);let n=e.o.getAttribute("name");n=n?n:k; data[n]=e()}
d99 1
a99 3
top[SEP].jq=jq; top[SEP].ko=ko
top[SEP].ajax=ajax; top[SEP].awax=awax
top[SEP].hxdom=hxdom
@


1.15
log
@fix: hxdom just swap one elem
@
text
@d1 3
a3 3
/*241226;global 'W' as entry*/
!(function(top){
top.W||(top.W={});"use strict"
d5 2
a6 1
function observe(elemId){
d9 6
a14 3
    var elem = document.getElementById(eid);
    if (elem === null) {alert(`id[${elemId}] not exist`);return}
  } else {var elem = elemId}
d30 1
a30 1
        if ("el"==_b[0]) {vm[_b[1]]=observe(_n)}
d41 4
a44 5
}
function scan(elemId){
  var eid = elemId[0]==='#' ? elemId.slice(1) : elemId;
  var vm = window[eid] = {}
  _attr_bind(document.getElementById(eid), vm)
d85 1
a85 1
	if (swap){  let ori = observe(target).o;//before | after | delete
d88 2
a89 2
	  else {observe(target)("")}
	}else {observe(target)(resp)}
d93 1
a93 1
    for (let k of a_in){let e = observe(k);let n=e.o.getAttribute("name");n=n?n:k; data[n]=e()}
d97 3
a99 3
top.W.observe=observe; top.W.scan=scan
top.W.ajax=ajax; top.W.awax=awax
top.W.hxdom=hxdom
@


1.14
log
@feat: delay on scan and isrej on awax
@
text
@d1 1
a1 1
/*241220;global 'W' as entry*/
d77 1
d82 3
a84 3
	if (swap){  let ori = observe(target)();//before | after | delete
	  if ("b"==swap[0]){observe(target)(resp+ori)}
	  else if("a"==swap[0]){observe(target)(ori+resp)}
@


1.13
log
@feat: remove vue, add scan
@
text
@d1 1
a1 1
/*241216;global 'W' as entry*/
d28 3
a30 2
          _n.addEventListener(ev,
            (e)=>{vm[_b[1]](e.target.value, vm)})
d44 1
a44 1
function ajax(method, url, data, cb_func, timeout = 10000) {
d70 2
a71 1
function awax(method, url, data, timeout = 10000) {
d73 2
a74 2
    if (st>=300 || st<200){reject(resp)}
    else{resolve(resp)} }, timeout)}
@


1.12
log
@ready rewrite mel.css
@
text
@d1 1
a1 1
/*241210;global 'W' as entry*/
d4 1
a4 179
// mimic Vue2
class Watcher{
	constructor(vm,expr,cb){
		this.vm = vm; this.expr = expr; this.cb = cb; this.value = this.get()
	}
// @@ multiplexing compile.js => getVal() and external exposure.
	getVal(vm,expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	}
	get(){
		Dep.target = this
		let value = this.getVal(this.vm, this.expr)
		Dep.target = null
		return value
	}
	update(){
		let newValue = this.getVal(this.vm, this.expr)
		this.cb(newValue)
	}
}
// @@ Data hijacking, It is mainly responsible for data response of data objects.
class Observer{
	constructor(data){
		this.observe(data)
	}
	observe(data){
		if(!data || typeof data !== 'object'){return;}
		Object.keys(data).forEach(key => {
			this.defineReactive(data, key, data[key])
			this.observe(data[key])
		})
	}
	defineReactive(obj, key, value){
		let that = this
		let dep = new Dep()
		Object.defineProperty(obj, key, {
			enumerable: true,
			configurable: true,
				get(){
					Dep.target && dep.addSub(Dep.target)
					return value
				},
				set(newValue){
					if(newValue != value){
					that.observe(newValue)
					value = newValue
					dep.notify()
				}
			}
		})
	}
}
// @@ Trigger monitor (publish subscription)
class Dep{
	constructor(){
		this.subs = []
	}
	addSub(watcher){
		this.subs.push(watcher)
	}
	notify(){
		this.subs.forEach(watcher => watcher.update())
	}
}
// @@ Template compilation, Move page elements into memory for work
class Compile {
	constructor(el, vm){
		this.el = (typeof el=="string" ? document.querySelector(el) : el)
		this.vm = vm
		if(this.el){
			let fragment = this.node2fragment(this.el)
			this.compile(fragment)
			this.el.appendChild(fragment)
		}
	}
// @@ Assist compile to complete the work (weight: core)
// These functions complete the work of moving into memory, compiling elements, compiling text and so on.
	compileElement(node){
		let attrs = node.attributes
		Array.from(attrs).forEach(attr => {
		let attrName = attr.name
			if(this.isDirective(attrName)){
				let expr = attr.value
				let [,type] = attrName.split('-')
				CompileUtil[type](node, this.vm, expr)
			}
		})
	}
	compileText(node){
		let expr = node.textContent
		let reg = /\{\{([^}]+)\}\}/g
		if(reg.test(expr)){
			CompileUtil['text'](node, this.vm, expr)
		}
	}
	node2fragment(el){
		let fragment = document.createDocumentFragment()
		let firstChild
		while(firstChild = el.firstChild){
			fragment.appendChild(firstChild)
		}
		return fragment
	}
	compile(fragment){
		let childNodes = fragment.childNodes
		Array.from(childNodes).forEach(node => {
			if(1 == node.nodeType){ // 1 is Element
				this.compileElement(node)
				this.compile(node)
			}else{
				this.compileText(node)
			}
		})
	}
	isDirective(name){
		return name.includes('v-model')
	}
}
CompileUtil = {
	getVal(vm, expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	},
	getTextVal(vm, expr, node){
		return expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1, ofs) => {
			let val = this.getVal(vm, mat1)
			let vfn = node.parentNode.getAttribute("v-fn")
			// function over v-model, only run first time
			if (vfn){if(0==ofs) return vm.$fn[vfn](val, vm.$data);else return ''}
			else return val
		})
	},
	text(node, vm, expr){
		let updateFn = (node, value)=>{node.textContent = value}
		let value = this.getTextVal(vm, expr, node)
		expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1) => {
			new Watcher(vm, mat1, (newValue) => {
				updateFn(node, this.getTextVal(vm, expr, node))
			})
		})
		updateFn(node, value)
	},
	setVal(vm, expr, value){
		expr = expr.split('.')
		return expr.reduce((prev, next, currentIndex) => {
			if(currentIndex === expr.length -1){
				return prev[next] = value
			}
			return prev[next]
		},vm.$data)
	},
	model(node, vm, expr){
		let updateFn = (node, value)=>{node.value = value}
		new Watcher(vm, expr, (newValue) => {
			updateFn(node, this.getVal(vm,expr))
		})
		node.addEventListener('input', (e) => {
			let newValue = e.target.value
			this.setVal(vm, expr, newValue)
		})
		updateFn(node, this.getVal(vm,expr))
	}
}
class miniVM{
	constructor(options){
		this.$el = options.el; this.$data = options.data
		this.$fn = options.fn // my extension for custom logic
		if(this.$el){// only the template exist and compile it
			new Observer(this.$data)
			new Compile(this.$el, this)
		}
	}
}
// wrap DOM elem get/set as func, ".o" is original DOM elem
d6 5
a10 3
  var eid = elemId[0]==='#' ? elemId.slice(1) : elemId;
  var elem = document.getElementById(eid);
  if (elem === null) {alert(`id[${elemId}] not exist`);return}
d17 2
a18 1
  ret.o = elem;
d21 21
d91 2
a92 4
top.W.vue=miniVM;
top.W.observe=observe;
top.W.ajax=ajax;
top.W.awax=awax;
@


1.11
log
@feat: observe accept # in sep.js
@
text
@d1 1
a1 1
/*241202;global 'W' as entry*/
d241 1
a241 1
    for (let k of a_in){let e = observe(k);let n=e.o.getAttribute("name"); if(n){data[n]=e()} }
@


1.10
log
@feat: awax in sep.js
@
text
@d1 250
a250 250
/*241202;global 'W' as entry*/
!(function(top){
top.W||(top.W={});"use strict"
// mimic Vue2
class Watcher{
	constructor(vm,expr,cb){
		this.vm = vm; this.expr = expr; this.cb = cb; this.value = this.get()
	}
// @@ multiplexing compile.js => getVal() and external exposure.
	getVal(vm,expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	}
	get(){
		Dep.target = this
		let value = this.getVal(this.vm, this.expr)
		Dep.target = null
		return value
	}
	update(){
		let newValue = this.getVal(this.vm, this.expr)
		this.cb(newValue)
	}
}
// @@ Data hijacking, It is mainly responsible for data response of data objects.
class Observer{
	constructor(data){
		this.observe(data)
	}
	observe(data){
		if(!data || typeof data !== 'object'){return;}
		Object.keys(data).forEach(key => {
			this.defineReactive(data, key, data[key])
			this.observe(data[key])
		})
	}
	defineReactive(obj, key, value){
		let that = this
		let dep = new Dep()
		Object.defineProperty(obj, key, {
			enumerable: true,
			configurable: true,
				get(){
					Dep.target && dep.addSub(Dep.target)
					return value
				},
				set(newValue){
					if(newValue != value){
					that.observe(newValue)
					value = newValue
					dep.notify()
				}
			}
		})
	}
}
// @@ Trigger monitor (publish subscription)
class Dep{
	constructor(){
		this.subs = []
	}
	addSub(watcher){
		this.subs.push(watcher)
	}
	notify(){
		this.subs.forEach(watcher => watcher.update())
	}
}
// @@ Template compilation, Move page elements into memory for work
class Compile {
	constructor(el, vm){
		this.el = (typeof el=="string" ? document.querySelector(el) : el)
		this.vm = vm
		if(this.el){
			let fragment = this.node2fragment(this.el)
			this.compile(fragment)
			this.el.appendChild(fragment)
		}
	}
// @@ Assist compile to complete the work (weight: core)
// These functions complete the work of moving into memory, compiling elements, compiling text and so on.
	compileElement(node){
		let attrs = node.attributes
		Array.from(attrs).forEach(attr => {
		let attrName = attr.name
			if(this.isDirective(attrName)){
				let expr = attr.value
				let [,type] = attrName.split('-')
				CompileUtil[type](node, this.vm, expr)
			}
		})
	}
	compileText(node){
		let expr = node.textContent
		let reg = /\{\{([^}]+)\}\}/g
		if(reg.test(expr)){
			CompileUtil['text'](node, this.vm, expr)
		}
	}
	node2fragment(el){
		let fragment = document.createDocumentFragment()
		let firstChild
		while(firstChild = el.firstChild){
			fragment.appendChild(firstChild)
		}
		return fragment
	}
	compile(fragment){
		let childNodes = fragment.childNodes
		Array.from(childNodes).forEach(node => {
			if(1 == node.nodeType){ // 1 is Element
				this.compileElement(node)
				this.compile(node)
			}else{
				this.compileText(node)
			}
		})
	}
	isDirective(name){
		return name.includes('v-model')
	}
}
CompileUtil = {
	getVal(vm, expr){
		expr = expr.split('.')
		return expr.reduce((prev, next) => {
			return prev[next]
		},vm.$data)
	},
	getTextVal(vm, expr, node){
		return expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1, ofs) => {
			let val = this.getVal(vm, mat1)
			let vfn = node.parentNode.getAttribute("v-fn")
			// function over v-model, only run first time
			if (vfn){if(0==ofs) return vm.$fn[vfn](val, vm.$data);else return ''}
			else return val
		})
	},
	text(node, vm, expr){
		let updateFn = (node, value)=>{node.textContent = value}
		let value = this.getTextVal(vm, expr, node)
		expr.replace(/\{\{([^}]+)\}\}/g, (_, mat1) => {
			new Watcher(vm, mat1, (newValue) => {
				updateFn(node, this.getTextVal(vm, expr, node))
			})
		})
		updateFn(node, value)
	},
	setVal(vm, expr, value){
		expr = expr.split('.')
		return expr.reduce((prev, next, currentIndex) => {
			if(currentIndex === expr.length -1){
				return prev[next] = value
			}
			return prev[next]
		},vm.$data)
	},
	model(node, vm, expr){
		let updateFn = (node, value)=>{node.value = value}
		new Watcher(vm, expr, (newValue) => {
			updateFn(node, this.getVal(vm,expr))
		})
		node.addEventListener('input', (e) => {
			let newValue = e.target.value
			this.setVal(vm, expr, newValue)
		})
		updateFn(node, this.getVal(vm,expr))
	}
}
class miniVM{
	constructor(options){
		this.$el = options.el; this.$data = options.data
		this.$fn = options.fn // my extension for custom logic
		if(this.$el){// only the template exist and compile it
			new Observer(this.$data)
			new Compile(this.$el, this)
		}
	}
}
// wrap DOM elem get/set as func, ".o" is original DOM elem
function observe(elemId){
  var elem = document.getElementById(elemId);
  if (elem === null) {alert(`id[${elemId}] not exist`);return}
  var st = new Set(["INPUT","TEXTAREA","SELECT"]);
  var ndCh = st.has(elem.nodeName)?'v':'i';//value or innerHTML
  var ret = function(val){
    if (val===undefined){return ndCh=='v'?elem.value:elem.innerHTML}
    else {ndCh=='v'?elem.value=val:elem.innerHTML=val; return ret}
  }
  ret.o = elem;
  return ret
}
// ajax  data:json object, cb_func(resp:str, status:200,403,etc)
function ajax(method, url, data, cb_func, timeout = 10000) {
  function encodeParams(params) {
    return Object.keys(params)
      .map(key => encodeURIComponent(key) + "=" + encodeURIComponent(params[key]))
      .join("&");
  }
  method = method.toUpperCase();
  if (data) { data = encodeParams(data); }
  if (method === "GET" && data) { url=`${url}?${data}`; data = null; }

  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true); // async true
  xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  var timer = setTimeout(function() {
    xhr.abort();
    cb_func(`ERROR: Request timeout ${timeout}ms`, 408); // 408: Request Timeout
    }, timeout);
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) { // Request is complete
      clearTimeout(timer);
      cb_func(xhr.responseText, xhr.status);
    }
  };
  if (data) { xhr.send(data); }
  else      { xhr.send();  }
}
function awax(method, url, data, timeout = 10000) {
  return new Promise( (resolve,reject)=>{ajax(method, url, data, (resp, st)=>{
    if (st>=300 || st<200){reject(resp)}
    else{resolve(resp)} }, timeout)}
)}
// take from htmx
function hxdom(method, url, id_elem, target, opt={}, timeout=10000) {
  function _subdom(resp, code){
	if (code >=300 || code <200) {alert(resp)}
	var eid = target[0]==='#' ? target.slice(1) : target;
	var elem = document.getElementById(eid);
	var swap = opt["swap"];
	if (swap){  let ori = observe(eid)();//before | after | delete
	  if ("b"==swap[0]){observe(eid)(resp+ori)}
	  else if("a"==swap[0]){observe(eid)(ori+resp)}
	  else {observe(eid)("")}
	}else {observe(eid)(resp)}
  }
  var a_in=id_elem.replace(/\s+/g, "").split(","); var data={};
  for (let k of a_in){let e = observe(k);let n=e.o.getAttribute("name"); if(n){data[n]=e()} }
  ajax(method, url, data, _subdom, timeout);
}
// export function
top.W.vue=miniVM;
top.W.observe=observe;
top.W.ajax=ajax;
top.W.awax=awax;
top.W.hxdom=hxdom
})(this);
@



1.9
log
@feat:tiny vue2 in sep
@
text
@d1 1
a1 1
/*241127;global 'W' as entry*/
d7 1
a7 3
		this.vm = vm; this.expr = expr; this.cb = cb
		// Please don't abandon old value?
		this.value = this.get()
d9 1
a9 2
// @@ multiplexing compile.js => getVal()
// And external exposure.
a61 1
		// Where do subscribers put it?
d222 5
d248 1
@


1.8
log
@feat: hxdom support swap
@
text
@d1 1
a1 1
/*240930;global 'W' as entry*/
d3 183
a185 1
top.W||(top.W={})
d227 1
a227 1
top.W.hxdom=function(method, url, id_elem, target, opt={}, timeout=10000) {
d243 2
d247 1
@


1.7
log
@feat: hxdom in jsmod
@
text
@d1 1
a1 1
/*240928;global 'W' as entry*/
d45 1
a45 1
top.W.hxdom=function(method, url, data, target, opt={}, timeout=10000) {
d50 6
a55 1
	observe(eid)(resp);
d57 2
@


1.6
log
@fix: GET url forgot to set
@
text
@d1 1
a1 1
/*240615;global 'W' as entry*/
d5 1
a5 1
top.W.observe=function(elemId){
d18 1
a18 1
top.W.ajax=function(method, url, data, cb_func, timeout = 10000) {
d37 1
a37 1
      clearTimeout(timer); // Clear timer
d44 12
@


1.5
log
@fix: some small tune on ajax
@
text
@d1 1
a1 1
/*240614;global 'W' as entry*/
d7 1
a7 1
  if (elem === null) {alert(elemId+' not exist');return}
a24 3
  var xhr = new XMLHttpRequest();
  xhr.open(method, url, true); // async true

a26 3
  if (method === "POST") {
    xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
  }
d28 3
@


1.4
log
@remove psquery dependency
@
text
@d1 1
a1 1
/*240613;global 'W' as entry*/
d24 1
d26 1
a26 1
  xhr.open(method, url, true);
a27 1
  method = method.toUpperCase();
d29 1
a29 3
  if (method === "GET") {
    url += "?" + data; data = null;
  }
d36 2
a37 2
    cb_func({ error: "Request timed out" }, 408); // 408: Request Timeout
  }, timeout);
d40 1
a40 1
      clearTimeout(timer); // Clear the timeout
@


1.3
log
@feat: add get into sep.js
@
text
@d1 1
a1 1
/*230429;global 'W' as entry;dep on psquery*/
d4 1
a4 1
// wrap DOM elem easy access
d17 31
a47 7
// data: json; fn(resp:str=http_body, status:str='success', xhr:object)
top.W.post=function(url, data, fn){if (!typeof $)return;
  var dstr='';for(k in data){if(dstr==''){dstr=`${k}=${encodeURIComponent(data[k])}`}else{dstr=dstr+`&${k}=${encodeURIComponent(data[k])}`}}
  $.ajax({type:"POST", url:url, data:dstr, success: fn})
}
top.W.get=function(url, fn){if (!typeof $)return;
  $.ajax({url:url, success: fn})
@


1.2
log
@feat: embed observe and post into dict
@
text
@d1 1
d17 1
a17 1
// fn(resp:str=http_body, status:str='success', xhr:object)
d22 4
a25 1
})(this)
@


1.1
log
@js observe
@
text
@d1 2
d4 1
a4 1
function observe(elemId){
d11 1
a11 2
    else {ndCh=='v'?elem.value=val:elem.innerHTML=val}
    return elem
d16 6
a21 1

@

