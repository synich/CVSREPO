head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	2017.10.16.15.32.25;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.1
log
@INSERT: mujs and duktape patch
@
text
@/*
extern void duk_open_extra(duk_context *ctx);
extern int duk_eval_file(duk_context *ctx, char *filename);
}*/

static void my_exit();
#define DUK_ABORT fwrite(msg, 1, strlen(msg), stderr);my_exit

#include "duktape.c"
#include "../extras/print-alert/duk_print_alert.c"
#include "../extras/console/duk_console.c"
#include "../extras/logging/duk_logging.c"
#include "../extras/module-duktape/duk_module_duktape.c"

/* Use a proxy wrapper to make undefined methods (console.foo()) no-ops. */
#define DUK_CONSOLE_PROXY_WRAPPER  (1 << 0)

void duk_open_extra(duk_context *ctx){
  duk_print_alert_init(ctx, 0);
  duk_console_init(ctx, DUK_CONSOLE_PROXY_WRAPPER);
  duk_logging_init(ctx, 0);
  duk_module_duktape_init(ctx);
}

static void my_exit(){exit(45);}

int duk_eval_file(duk_context *ctx, char *filename){
  FILE *f;
  char *s;
  int n, t;

  f = fopen(filename, "rb");
  if (!f) {
    fprintf(stderr, "cannot open file: '%s'", filename);
  }

  if (fseek(f, 0, SEEK_END) < 0) {
    fclose(f);
    fprintf(stderr, "cannot seek in file: '%s'", filename);
  }

  n = ftell(f);
  if (n < 0) {
    fclose(f);
    fprintf(stderr, "cannot tell in file: '%s'", filename);
  }

  if (fseek(f, 0, SEEK_SET) < 0) {
    fclose(f);
    fprintf(stderr, "cannot seek in file: '%s'", filename);
  }

  s = malloc(n + 1);
  if (!s) {
    fclose(f);
    fprintf(stderr, "cannot allocate storage for file contents: '%s'", filename);
  }

  t = fread(s, 1, n, f);
  if (t != n) {
    free(s);
    fclose(f);
    fprintf(stderr, "cannot read data from file: '%s'", filename);
  }
  s[n] = 0;
  duk_push_string(ctx, s);
  /// reuse n to save call result
  n = duk_peval(ctx);
  if (n != DUK_EXEC_SUCCESS) {
    fprintf(stderr, "Eval Error:%s\n", duk_safe_to_string(ctx, -1));
  }
  free(s);
  fclose(f);
  return n;
}
@
