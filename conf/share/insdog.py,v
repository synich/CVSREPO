head	1.1;
access;
symbols;
locks; strict;
comment	@# @;


1.1
date	2020.10.08.07.51.00;	author alarm;	state Exp;
branches;
next	;


desc
@@


1.1
log
@INSERT: for python guard
@
text
@import code
import traceback
import signal
import threading
import sys


def debug(sig, frame):
    """Interrupt running process, and provide a python prompt for
    interactive debugging."""
    d = {'_frame': frame}         # Allow access to frame object.
    d.update(frame.f_globals)  # Unless shadowed by global
    d.update(frame.f_locals)

    i = code.InteractiveConsole(d)
    message  = "Signal received : entering python shell.\nTraceback:\n"
    message += ''.join(traceback.format_stack(frame))
    i.interact(message)


def dumpstacks(sig, frame):
    id2name = dict([(th.ident, th.name) for th in threading.enumerate()])
    code = []
    for threadId, stack in sys._current_frames().items():
        code.append("\n# Thread:%s(%d)" % (id2name.get(threadId, ""), threadId))
        for filename, lineno, name, line in traceback.extract_stack(stack):
            code.append('File:"%s", line %d, in %s' % (filename, lineno, name))
            if line:
                code.append("  %s" % (line.strip()))
    print("\n".join(code))


def listen():
    signal.signal(signal.SIGUSR1, debug)  # Register handler
    signal.signal(signal.SIGQUIT, dumpstacks)


listen()
@
