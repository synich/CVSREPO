head	1.17;
access;
symbols;
locks; strict;
comment	@ * @;


1.17
date	2019.02.28.15.09.34;	author Administrator;	state Exp;
branches;
next	1.16;

1.16
date	2019.02.26.15.04.23;	author Administrator;	state Exp;
branches;
next	1.15;

1.15
date	2019.02.03.01.46.22;	author Administrator;	state Exp;
branches;
next	1.14;

1.14
date	2019.01.27.14.48.29;	author Administrator;	state Exp;
branches;
next	1.13;

1.13
date	2019.01.19.14.10.07;	author Administrator;	state Exp;
branches;
next	1.12;

1.12
date	2019.01.05.14.45.25;	author Administrator;	state Exp;
branches;
next	1.11;

1.11
date	2019.01.05.13.16.46;	author Administrator;	state Exp;
branches;
next	1.10;

1.10
date	2019.01.02.22.49.57;	author Administrator;	state Exp;
branches;
next	1.9;

1.9
date	2018.12.30.13.23.35;	author Administrator;	state Exp;
branches;
next	1.8;

1.8
date	2018.12.30.12.25.30;	author Administrator;	state Exp;
branches;
next	1.7;

1.7
date	2018.12.23.12.46.13;	author Administrator;	state Exp;
branches;
next	1.6;

1.6
date	2018.12.23.09.26.31;	author Administrator;	state Exp;
branches;
next	1.5;

1.5
date	2018.12.23.03.17.19;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2018.12.22.04.43.34;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2018.12.21.14.02.17;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2018.11.19.15.27.34;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2018.11.18.12.23.26;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.17
log
@UPDATE: improve utest
@
text
@#include "walib.h"

void test_md5(){
	unsigned char encrypt[] ="admin";//21232f297a57a5a743894a0e4a801fc3
    char output[33] = {0};
	wa_md5(encrypt, output);
    printf("Original:%s\nHash:%s\n",encrypt, output);
}

void test_http(char* ip, int port ){
  char* pos;
#define HTTPBUF 2194
  char recvbuf[HTTPBUF] = {1};

  initsock();
  wa_settcpopt(10);
  if (0<=http10(ip, port,
    "POST /video ", "Content-Type: application/json\r\n", "{}",
    recvbuf, HTTPBUF)){
    pos = strstr(recvbuf, "\r\n\r\n");
    if (pos) {
	  printf("http head:%d,body:%d\n", pos+4-recvbuf, strlen(pos+4));
    } else {
	  puts("get nothing");
    }
  } else {
	  puts("other http error");
  }
  finisock();
}

int test_calendar(){
	int i;
	int y,M,d,h,m,s;
	int epoch = wa_calendar(&y, &M, &d, &h, &m, NULL, -28800);
	printf("epoch:%d %d-%d-%d %d:%d\n", epoch, y,M,d,h,m);
	i += wa_utok(d==27);
	i += wa_utok(M==2);
	return i;
}

void test_rand(){
	int i = 0;
	for (;i<30;i++){
		printf("%d ", wa_rands(1, 64));
	}
	puts("");
}

int test_match(){
  struct stResub sub;
  int i = wa_match("(\\l*)(\\u*)(\\a*)", "ghaAbcPz1", &sub);
  printf("%d,%d,%.*s\n", i, sub.nsub, sub.sub[3].len, sub.sub[3].ptr);
  return wa_utok(i==0);
}

void test_mempool(int sze){
#define TR 40
	char *p[TR];
	int i = 0;
	for (; i<TR; i++) {
		p[i] = wa_alloc(sze);
	}
	wa_memreport();
	for (i=0; i<TR; i+=2) {
		wa_revert(p[i] );
	}
	wa_memreport();
	for (i=0; i<TR; i+=3) {
		p[i] = wa_alloc(sze);
	}
	wa_memreport();
	wa_finalize();
	wa_memreport();
}

void test_ephemem(){
	char *p1, *p2, *p3, *p4, *p5, *p6;
	wa_memdbgflg(1);
	p1 = wa_ephemem(10);
	p2 = wa_ephemem(10);
	strcpy(p1, "hello");
	strcpy(p2, "world");
	printf("%p,%p\n", p1, p2);
	printf("%s,%s\n", p1, p2);
	wa_memreport();

	p3 = wa_ephemem(20);
	p4 = wa_ephemem(5);
	strcpy(p3, "crime");
	strcpy(p4, "p");
	printf("%p,%p\n", p3, p4);
	printf("%s,%s\n", p3, p4);
	wa_memreport();

	p5 = wa_ephemem(15);
	p6 = wa_ephemem(15);
	strcpy(p3, "roj");
	strcpy(p4, "sonia");
	printf("%p,%p\n", p5, p6);
	printf("%s,%s\n", p5, p6);
	wa_memreport();
}

int test_file(){
	int i=0;
	char*p = wa_readfile("Makefile");
	i +=wa_utok(369==strlen(p));
	i +=wa_utok('C'==p[0]);
	return i;
}

void test_log(){
	FILE* fd;
	fd = wa_setfd4l("log.txt");
	wa_log("sqlite %d, %d\n", 1, 5);
	fclose(fd);
}

int main(int argc, char *argv[])
{
	//test_md5();
    //test_http(argv[1], atoi(argv[2]));
	TEST(_calendar);
	//test_rand();
    TEST(_match);
	//test_mempool( atoi(argv[1]) );
	//test_ephemem();
	TEST(_file);
	//test_log();
    return wa_utsum();
}
@


1.16
log
@INSERT: add UnitTest
@
text
@d37 1
a37 1
	i += wa_utok(d==26);
d50 1
a50 1
void test_match(){
d54 1
d105 2
a106 1
void test_file(){
d108 3
a110 1
	printf("%d\n", strlen(p));
a121 1
	int i = 0;
d124 1
a124 1
	i += test_calendar();
d126 1
a126 1
    //test_match();
d129 1
a129 1
	//test_file();
d131 1
a131 1
    return i;
@


1.15
log
@INSERT: add random generate
@
text
@d32 2
a33 1
void test_calendar(){
d37 3
d44 2
a45 2
	for (;i<10;i++){
		printf("%d ", wa_rand(32));
d47 1
d118 1
d121 2
a122 2
	//test_calendar();
	test_rand();
d128 1
a128 1
    return 0;
@


1.14
log
@INSERT: simple wa_log implement
@
text
@d38 7
d116 1
d121 1
a121 1
	test_log();
@


1.13
log
@UPDATE: calendar support time zone offset
@
text
@d97 7
d108 1
a108 1
	test_calendar();
d113 1
@


1.12
log
@UPDATE: make alloc mem align
@
text
@d34 1
a34 1
	int epoch = wa_calendar(&y, &M, &d, &h, &m, NULL);
d101 1
a101 1
	//test_calendar();
d103 1
a103 1
	test_mempool( atoi(argv[1]) );
@


1.11
log
@UPDATE: copy small mem alloc to big, and enhance memreport
@
text
@d103 1
a103 1
	test_mempool(40);
@


1.10
log
@UPDATE: not read when select timeout, avoid some crash situation
@
text
@d44 17
a60 8
void test_smallmem(){
	char *p1, *p2, *p3, *p4;
	p1 = wa_alloc(8);
	p2 = wa_alloc(8);
	p3 = wa_alloc(8);
	wa_revert(p2);
	p4 = wa_alloc(8);
	printf("%p,%p,%p,%p\n", p1, p2, p3, p4);
d100 1
a100 1
    test_http(argv[1], atoi(argv[2]));
d103 1
a103 1
	//test_smallmem();
@


1.9
log
@INSERT: add file util
@
text
@d17 1
a17 1
  http10(ip, port,
d19 7
a25 4
    recvbuf, HTTPBUF);
  pos = strstr(recvbuf, "\r\n\r\n");
  if (pos) {
	printf("http head:%d,body:%d\n", pos+4-recvbuf, strlen(pos+4));
d27 1
a27 1
	puts("get nothing");
a28 1
  
d44 11
d91 1
a91 1
    //test_http(argv[1], atoi(argv[2]));
d94 1
d96 1
a96 1
	test_file();
@


1.8
log
@UPDATE: add guide for http test
@
text
@d70 5
d78 1
a78 1
    test_http(argv[1], atoi(argv[2]));
d82 1
@


1.7
log
@UPDATE: protect size of ephemral alloc
@
text
@a0 3
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
d16 1
d21 6
a26 1
  puts(pos+4);
d73 1
a73 1
    //test_http(argv[1], atoi(argv[2]));
d75 1
a75 1
    test_match();
@


1.6
log
@INSERT: copy mem alloc from fila add ephemral mem
@
text
@d72 2
a73 2
    //test_match();
	test_ephemem();
@


1.5
log
@INSERT: support metachar l/u/a/w
@
text
@d39 28
d72 2
a73 1
    test_match();
@


1.4
log
@INSERT: support regex match
@
text
@d35 2
a36 2
  int i = wa_match("a.*c|a.*(b.)", "ghaabzcz", &sub);
  printf("%d,%d\n", i, sub.nsub);
@


1.3
log
@UPDATE: support calendar
@
text
@d33 6
d43 2
a44 1
	test_calendar();
@


1.2
log
@UPDATE: rename to http10 and optimize
@
text
@d27 6
d36 2
a37 1
    test_http(argv[1], atoi(argv[2]));
@


1.1
log
@INSERT: release my c lib
@
text
@d3 1
a14 1
  char* ctx = "GET / HTTP/1.1\r\nHost:waer.f3322.net:55555\r\n\r\n";
d19 2
a20 2
  httpShort(ip, port,
    "GET / HTTP/1.0\r\n\r\n",
d31 1
a31 1
	return 0;
@

