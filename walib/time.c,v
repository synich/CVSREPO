head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	2019.02.26.15.03.15;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2019.02.03.01.46.22;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2019.01.19.14.10.06;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2018.12.30.11.53.14;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2018.12.21.14.02.17;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.5
log
@INSERT: add random
@
text
@#include <time.h>
#include <unistd.h>
#include "walib.h"

int wa_calendar(int* year, int* mon, int* day, int* hour, int* min, int* sec, int tz) {
	struct tm *cltm;
	time_t t = time(NULL) + tz;/*adjust time zone offset*/
	cltm = localtime(&t);
	year ? *year = cltm->tm_year+1900 : 0;
	mon ? *mon  = cltm->tm_mon+1 : 0;
	day ? *day  = cltm->tm_mday : 0;
	hour ? *hour = cltm->tm_hour : 0;
	min ? *min  = cltm->tm_min : 0;
	sec ? *sec  = cltm->tm_sec : 0;
	return (int)t;
}

void wa_msleep(int m) {
	usleep(m*1000);
}

int wa_rands(int from, int to){
#define SHUFFLE 0xF
	static int cnt = SHUFFLE;
	int ret, range=to-from;
	if ( (cnt++&SHUFFLE)==SHUFFLE ){ // several times reshuffle
	  srand(time(NULL)-cnt);
	}
	ret = from +( rand() % range );
	return ret;
}
@


1.4
log
@INSERT: add random generate
@
text
@d22 6
a27 5
int wa_rands(int range, int start){
	static int cnt = 0;
	int ret;
	if ( (cnt&0x1F)==0 ){ // each 32 times re srand
	  srand(time(NULL));
d29 1
a29 2
	ret = start +( rand() % range );
	cnt++;
@


1.3
log
@UPDATE: calendar support time zone offset
@
text
@d21 11
@


1.2
log
@UPDATE: linux no _sleep, so change to usleep
@
text
@d5 1
a5 1
int wa_calendar(int* year, int* mon, int* day, int* hour, int* min, int* sec) {
d7 1
a7 1
	time_t t = time(NULL);
@


1.1
log
@UPDATE: support calendar
@
text
@d2 1
d17 4
@

