head	1.15;
access;
symbols;
locks; strict;
comment	@ * @;


1.15
date	2019.02.28.15.08.50;	author Administrator;	state Exp;
branches;
next	1.14;

1.14
date	2019.02.26.15.03.15;	author Administrator;	state Exp;
branches;
next	1.13;

1.13
date	2019.02.03.01.46.22;	author Administrator;	state Exp;
branches;
next	1.12;

1.12
date	2019.01.27.14.48.29;	author Administrator;	state Exp;
branches;
next	1.11;

1.11
date	2019.01.19.14.10.07;	author Administrator;	state Exp;
branches;
next	1.10;

1.10
date	2018.12.30.13.23.49;	author Administrator;	state Exp;
branches;
next	1.9;

1.9
date	2018.12.30.11.50.59;	author Administrator;	state Exp;
branches;
next	1.8;

1.8
date	2018.12.25.13.49.03;	author Administrator;	state Exp;
branches;
next	1.7;

1.7
date	2018.12.23.09.26.31;	author Administrator;	state Exp;
branches;
next	1.6;

1.6
date	2018.12.23.03.17.19;	author Administrator;	state Exp;
branches;
next	1.5;

1.5
date	2018.12.22.04.43.34;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2018.12.21.14.02.17;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2018.11.29.12.29.58;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2018.11.19.15.27.34;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2018.11.18.12.23.26;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.15
log
@INSERT: simple UnitTest framework
@
text
@#ifndef WA_LIB_H
#define WA_LIB_H

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif
/*dst must have at least 33 bytes*/
void wa_md5(char* src, char* dst);

/*return epoch, calendar in localtime*/
int wa_calendar(int* year, int* mon, int* day, int* hour, int* min, int* sec, int tz);
void wa_msleep(int m);
int wa_rands(int from, int to);/* [from, to) */
#define wa_rand(r) wa_rands(0, r)
/*benifit for socket*/
int initsock();
void finisock();
int opentcp(char* ip, unsigned short port);
void wa_settcpopt(int rcvtimeo);
/*return -1:network error, >0 http response length*/
int http10(char* ip, int port, char* mthurl, char* header, char* body,char* recvbuf, int len);
char* wa_readfile(const char* path);
void* wa_setfd4l(char* fname);
int wa_log(char* fmt, ...);
#define TEST(x) wa_utrun(#x, test##x)
int wa_utok(int result);/*if result true return 0, else 1. Sum all is error count*/
typedef int(*wa_utfn)(void);
void wa_utrun(const char* name, wa_utfn f);
int wa_utsum();

#define REG_MAXSUB 10
struct stResub {
  int nsub;    /* 0:no match, 1:full match, 1+N:full match plus N capture */
  struct {
    const char *ptr; /* Pointer to the substring */
    int len;         /* Substring length */
  } sub[REG_MAXSUB];
};
/*return 0 matched, -1 no match
  -11 bracket error -12 too long -13 other
 *
 * Supported syntax:
 *	^		Match beginning of a buffer
 *	$		Match end of a buffer
 *	|		Alternative operator
 *	()		Grouping and substring capturing
 *	[...]		Match any character from set
 *	[^...]		Match any character but ones from set
 *	\s		Match whitespace
 *	\S		Match non-whitespace
 *	\d		Match decimal digit
 *	\l		Match lowercase
 *	\u		Match uppercase
 *	\a		Match all alpha
 *	\w		Match all alphanumeric
 *	\r		Match carriage return
 *	\n		Match newline
 *	+		Match one or more times (greedy)
 *	+?		Match one or more times (non-greedy)
 *	*		Match zero or more times (greedy)
 *	*?		Match zero or more times (non-greedy)
 *	?		Match zero or once
 *	\xDD		Match byte with hex value 0xDD
 *	\meta		Match one of the meta character: ^$().[*+?\
 */
int wa_match(char* reg, char* txt, struct stResub *sub);

/* Memory Pool */
#define wa_alloc(n) wa_alloc_(n, __FILE__, __LINE__)
char* wa_alloc_(int n, const char* f, int l);
#define wa_revert(p) wa_revert_((char*)(p), __FILE__, __LINE__);(p)=NULL
void wa_revert_(char* p, const char* f, int l);
char* wa_ephemem(int n);
void wa_finalize();
char* wa_dupstr(const char* p);
char* wa_dupbin(const char* b, int len);
int wa_memdbgflg(int i);
void wa_memreport();

#ifdef __cplusplus
}
#endif

#endif
@


1.14
log
@INSERT: add random
@
text
@d29 5
a33 1
int wa_utok(int result);/*UnitTest, if result true return 0, else 1. Sum all is error count*/
@


1.13
log
@INSERT: add random generate
@
text
@d17 2
a18 2
int wa_rands(int range, int start);
#define wa_rand(r) wa_rands(r, 0)
d29 1
@


1.12
log
@INSERT: simple wa_log implement
@
text
@d17 2
a18 1

@


1.11
log
@UPDATE: calendar support time zone offset
@
text
@d26 2
@


1.10
log
@INSERT: add file util
@
text
@d15 1
a15 1
int wa_calendar(int* year, int* mon, int* day, int* hour, int* min, int* sec);
@


1.9
log
@UPDATE: add msleep and settcpopt
@
text
@d25 1
@


1.8
log
@UPDATE: fixed http server not close socket, req in endless loop
@
text
@d4 4
d16 1
d22 1
@


1.7
log
@INSERT: copy mem alloc from fila add ephemral mem
@
text
@d17 1
@


1.6
log
@INSERT: support metachar l/u/a/w
@
text
@d56 12
@


1.5
log
@INSERT: support regex match
@
text
@d40 4
@


1.4
log
@UPDATE: support calendar
@
text
@d19 33
@


1.3
log
@UPDATE: make available in c++
@
text
@d10 3
@


1.2
log
@UPDATE: rename to http10 and optimize
@
text
@d4 3
d16 4
@


1.1
log
@INSERT: release my c lib
@
text
@d11 1
a11 2
int httpreq(int fd, char* sendbuf, char* recvbuf, int len);
int httpShort(char* ip, int port, char* sendbuf, char* recvbuf, int len);
@

