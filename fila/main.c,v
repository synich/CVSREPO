head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2018.09.28.15.16.33;	author Administrator;	state Exp;
branches;
next	1.10;

1.10
date	2018.09.23.15.05.52;	author Administrator;	state Exp;
branches;
next	1.9;

1.9
date	2018.09.23.13.49.29;	author Administrator;	state Exp;
branches;
next	1.8;

1.8
date	2018.09.23.05.47.04;	author Administrator;	state Exp;
branches;
next	1.7;

1.7
date	2018.09.22.13.38.07;	author Administrator;	state Exp;
branches;
next	1.6;

1.6
date	2018.09.22.10.26.46;	author Administrator;	state Exp;
branches;
next	1.5;

1.5
date	2018.09.20.17.17.26;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2018.09.20.15.06.18;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2018.09.19.16.33.30;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2018.09.17.15.24.42;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2018.09.16.12.58.00;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.11
log
@UPDATE: use function instead of global varible
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "rua.h"

static void put2err(const char* str){
  fputs(str, stderr);
  fputs("\n", stderr);
}

// Thanks to wren source file.
// Reads the contents of the file at [path] and returns it as a heap allocated
// string.
//
// Returns `NULL` if the path could not be found. Exits if it was found but
// could not be read.
static char* readFile(const char* path)
{
  FILE* file = fopen(path, "rb");
  if (file == NULL) return NULL;

  // Find out how big the file is.
  fseek(file, 0L, SEEK_END);
  size_t fileSize = ftell(file);
  rewind(file);

  // Allocate a buffer for it.
  char* buffer = (char*)malloc(fileSize + 1);
  if (buffer == NULL)
  {
    fprintf(stderr, "Could not read file \"%s\".\n", path);
    exit(74);
  }

  // Read the entire file.
  size_t bytesRead = fread(buffer, sizeof(char), fileSize, file);
  if (bytesRead < fileSize)
  {
    fprintf(stderr, "Could not read file \"%s\".\n", path);
    exit(74);
  }

  // Terminate the string.
  buffer[bytesRead] = '\0';

  fclose(file);
  return buffer;
}

static void parseFile(rh_vm* vm, const char* fname, int an, char** av) {
  char* src;
  int i = 0;
  src = readFile(fname);
  if (0==an){
    puts(rh_eval0(vm, src));
  } else if (1==an) {
    puts(rh_eval1(vm, src, av[i]));
  } else if (2==an) {
    puts(rh_eval2(vm, src, av[i], av[i+1]));
  } else if (3==an) {
    puts(rh_eval3(vm, src, av[i], av[i+1], av[i+2]));
  } else if (4<=an) {
    puts(rh_eval4(vm, src, av[i], av[i+1], av[i+3], av[i+4]));
  }

  free(src);
}

static void dumpFile(rh_vm* vm, const char* fname){
  char* src;
  src = readFile(fname);
  puts(rh_dump(vm, src));
  free(src);
}

static void usage(char* ename){
  puts("Fila Interpreter");
  printf("Usage: %s [option] Filename [params]\n", ename);
  printf("Usage: %s [option] -e String [params]\n", ename);
  puts("Option: -c dump code");
  puts("Option: -d m:AllocDetail  i:Instruction  p:PoolReport");
  exit(45);
}

int main(int argc, char** argv){
  int i = 1, argnum = 0;
  rh_vm *vm;
  int pooldbg = 0;
  if (argc <= 1) {
    usage(argv[0]);
  }

  vm = rh_new();
  while (i < argc) {
    if (0 == strcmp(argv[i], "-e")) {
      i++;
      puts(rh_eval(vm, argv[i], NULL, NULL, NULL, NULL));
    } else if (0 == strcmp(argv[i], "-c")) {
      dumpFile(vm, argv[++i]);
    } else if (0 == strcmp(argv[i], "-d")) {
      char* c = argv[++i];
      while(*c) {
        if ('m'==*c) { rh_dbgflg(1); }
        if ('i'==*c) { rh_vmtune(1); }
        if ('p'==*c) { pooldbg = 1; }
        c++;
      }
    } else {
      argnum = argc -1 - i;
      parseFile(vm, argv[i], argnum, &argv[i+1]);
      i += argnum;
    }
    i++;
  }
  rh_free(vm);
  if (pooldbg) {
    rh_memreport();
  }
  return 0;
}
@


1.10
log
@UPDATE: fixed bug which vmcall -> sf_fnexec should insert params into env
@
text
@a84 3
extern int g_pooldbg;
extern int g_instructionexec;

d88 1
d103 3
a105 3
        if ('m'==*c) { g_pooldbg |= 1; }
        if ('i'==*c) { g_instructionexec = 1; }
        if ('p'==*c) { g_pooldbg |= 2; }
d116 1
a116 1
  if (g_pooldbg&0x2) {
@


1.9
log
@INSERT: command options
@
text
@d50 1
a50 1
static void parseFile(rh_vm* vm, const char* fname) {
d52 1
d54 12
a65 1
  puts(rh_eval(vm, src, NULL, NULL, NULL, NULL));
d78 2
a79 2
  printf("Usage: %s [option] Filename\n", ename);
  printf("Usage: %s [option] -e String\n", ename);
d89 1
a89 1
  int i = 1;
d99 1
d111 3
a113 1
      parseFile(vm, argv[i]);
@


1.8
log
@UPDATE: fixed low level error
@
text
@a10 6
void scriptPush(void* vm, int major, const char* val){
}

void scriptReduce(void* vm, int action){
}

d57 7
d68 2
d73 3
d87 10
d103 3
a105 1
  rh_memreport();
@


1.7
log
@INSERT: add Env_val destructor callback
@
text
@d59 1
a59 1
  rhi_parserun(vm, src, NULL, NULL, NULL, NULL);
@


1.6
log
@UPDATE: check memory leak and unit test for del hash
@
text
@d86 1
a87 1
  rh_free(vm);
@


1.5
log
@UPDATE: change inner name, use TOKEY instead of fixed, change hash table value assign
@
text
@d86 1
@


1.4
log
@UPDATE: improve lex and make parse run
@
text
@d59 1
a59 1
  rh_parserun(vm, src, NULL, NULL, NULL, NULL);
@


1.3
log
@UPDATE: make mainstream available
@
text
@d64 3
a66 6
  puts("Parser 2 Any. Use Lex & Lemon & Script");
#ifndef AS_RELEASE
  printf("Prepare a script.lua or script.js beside %s\n", ename);
#endif
  printf("Usage: %s [option] ParseFile\n", ename);
  printf("Usage: %s [option] -e ParseString\n", ename);
@


1.2
log
@INSERT: add lex and lemon
@
text
@d2 1
d56 1
a56 1
static void parseFile(const char* fname) {
d59 1
a59 1
  leleEvalString(src);
d75 1
d80 1
a83 1
      leleEvalString(argv[i]);
d85 1
a85 1
      parseFile(argv[i]);
d89 1
@


1.1
log
@INSERT: try my first language short for fila
@
text
@d5 18
a22 1
int main(int argc, char *argv[])
d24 64
a87 3
	char* s = "hello";
	rh_eval(NULL, s);
	return 0;
@

