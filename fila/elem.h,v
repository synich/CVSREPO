head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	2018.09.24.07.27.57;	author Administrator;	state Exp;
branches;
next	1.10;

1.10
date	2018.09.23.13.55.08;	author Administrator;	state Exp;
branches;
next	1.9;

1.9
date	2018.09.23.07.14.47;	author Administrator;	state Exp;
branches;
next	1.8;

1.8
date	2018.09.22.16.06.34;	author Administrator;	state Exp;
branches;
next	1.7;

1.7
date	2018.09.22.13.40.03;	author Administrator;	state Exp;
branches;
next	1.6;

1.6
date	2018.09.22.05.32.20;	author Administrator;	state Exp;
branches;
next	1.5;

1.5
date	2018.09.21.15.23.47;	author Administrator;	state Exp;
branches;
next	1.4;

1.4
date	2018.09.20.17.17.26;	author Administrator;	state Exp;
branches;
next	1.3;

1.3
date	2018.09.19.15.06.20;	author Administrator;	state Exp;
branches;
next	1.2;

1.2
date	2018.09.18.15.20.12;	author Administrator;	state Exp;
branches;
next	1.1;

1.1
date	2018.09.16.12.58.00;	author Administrator;	state Exp;
branches;
next	;


desc
@@


1.11
log
@INSERT: implement if branch
@
text
@#ifndef _RUA_ELEMENT_H_
#define _RUA_ELEMENT_H_

#include <stdint.h>
#include "rua.h"
#include "pool.h"

/** Language base element definition
    Value, Function Proto, VM
*/

/* element define */
typedef struct rh_val
{
    char type;
    char resv[7];
    union {
        double f;
        int64_t l;
        char* s;
    } u;
} rh_val;

/* VM code is 16bit LE
//   0-4   5-7  8-11  12-15
//   OP     A    B      C
//   0-4   5-10 11-15
//   OP     A    B
//   0-4   5-15
//   OP     A
*/
#define CODE_SIZE  16
#define MASK_1(sze) (0xFFFF>>(CODE_SIZE-sze))
#define GET_ARG(c, pos, sze)  ((c>>(pos))&(MASK_1(sze)))
#define OPCODE(c)  GET_ARG(c, 0, 5)
#define ARG_3A(c)  GET_ARG(c, 5, 3)
#define ARG_3B(c)  GET_ARG(c, 8, 4)
#define ARG_3C(c)  GET_ARG(c, 12, 4)
#define ARG_2A(c)  GET_ARG(c, 5, 6)
#define ARG_2B(c)  GET_ARG(c, 11, 5)
#define ARG_1A(c)  GET_ARG(c, 5, 11)

/* function is combine of code and env(both var and const) */
typedef struct rh_func
{
  /*code will split by `;', the first character is instructor,
    other are params(whicl split by `,', also constant whin)
    for example "+a,_0,15" means a=_0+15 */
  char* code;
  struct Env_val* env;
  char cflg; /*compare flag*/
  char resv[3];
} rh_func;

/* A minimal VM should have func list(Fisrt is main)
  Stack hold function self and params */
struct rh_vm
{
  struct Env_val *fmap;  /* fn hash table*/
};

/*Inner use*/
/* compile source to vm */
rh_vm* rhi_src2vm(rh_vm* vm, const char* expr);
/* when parse finish, call main from vm */
char* rhi_vmcall(rh_vm*, const char* funcname,
              const char* p0, const char* p1,
              const char* p2, const char* p3);
/* run source. inner will parse into vm and run */
char* rhi_srcrun(rh_vm*, const char* expr,
              const char* p0, const char* p1,
              const char* p2, const char* p3);

/* VM relative generate and execute */
void rhi_meetfn(rh_vm* vm, char* funcname);
void rhi_combofunc(rh_vm* vm, char* name, char* code);
char* rhi_gengoexpr(rh_vm* vm, const char* ctxname, const char* goname,
              const char* p0, const char* p1,
              const char* p2, const char* p3);

#endif
@


1.10
log
@INSERT: implement IR code dump and run
@
text
@d51 2
@


1.9
log
@UPDATE: seperate parse and dump, add rh_dump
@
text
@a45 3
  /*return value will save in this value, like x86's EAX reg*/
  uint64_t ret;

d61 6
d71 1
a77 5
/* when parse finish, call main from vm */
char* rhi_callfn(rh_vm*, const char* funcname,
              const char* p0, const char* p1,
              const char* p2, const char* p3);

@


1.8
log
@UPDATE: use Werror, stop compile when warning
@
text
@d64 2
a65 2
/* parse expr into vm and run */
char* rhi_parserun(rh_vm*, const char* expr,
@


1.7
log
@UPDATE: gofunc will only invoke in runtime not parse time, add simple instruction interpreter
@
text
@d12 1
a12 1
// element define
d24 1
a24 1
// VM code is 16bit LE
d31 1
d43 1
a43 7
#define MAX_CODE_SIZE 64
// reserved for register
#define MAX_STACK_SIZE 16
// reserved for constant
#define MAX_CONST_SIZE 16

/// function is combine of code and env(both var and const)
d56 2
a57 2
// A minimal VM should have func list(Fisrt is main)
// Stack hold function self and params
d60 1
a60 1
  struct Env_val *fmap;  // fn hash table
@


1.6
log
@UPDATE: support go func and pass parameter
@
text
@d74 5
a78 1
void rhi_genfunc(rh_vm* vm, char* name, char* code);
@


1.5
log
@UPDATE: add binary hash operation, and fixed genfunc error
@
text
@a67 1
// VM relative generate and execute
a68 1
void rhi_genfunc(rh_vm* vm, char* name, char* code);
d73 2
@


1.4
log
@UPDATE: change inner name, use TOKEY instead of fixed, change hash table value assign
@
text
@d5 1
@


1.3
log
@UPDATE: modify parse and code generate presentation
@
text
@a49 3
  char name[18];
  uint8_t paramnum;

d64 1
a64 2
  rh_func *fn;  // first is main function
  rh_val *stack; //
d67 13
@


1.2
log
@DELETE: rename example.txt to .nim
@
text
@a50 1
  uint8_t cdnum;
d53 7
a59 1
  uint16_t code[MAX_CODE_SIZE];
@


1.1
log
@INSERT: try my first language short for fila
@
text
@d5 1
d47 1
a47 1
/// function is combine of code and stack
d55 1
a55 10
  char stktype[MAX_STACK_SIZE];
  union {
    int32_t l;
    char* s;
  } stack[MAX_STACK_SIZE];
  char csttype[MAX_CONST_SIZE];
  union {
    int32_t l;
    char* s;
  } uc[MAX_CONST_SIZE];
@

