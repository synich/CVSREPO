head	1.3;
access;
symbols;
locks; strict;
comment	@# @;


1.3
date	2019.06.22.09.57.28;	author WIN7;	state Exp;
branches;
next	1.2;

1.2
date	2019.06.11.14.21.56;	author WIN7;	state Exp;
branches;
next	1.1;

1.1
date	2019.06.09.08.08.40;	author WIN7;	state Exp;
branches;
next	;


desc
@@


1.3
log
@UPDATE: make insert handy
@
text
@-- mth:GET/POST    uri:/applua/path/resource
-- qs:k1=v1&k2=v2  body:{"k":"v"}


local function main()
  ngx.header.content_type = 'text/plain';
  local mth = ngx.req.get_method();
  local uri = ngx.var.uri;
  local qs = ngx.var.query_string;

  local cls, func = uri:match('/[^/]+/([^/]+)/([^/]+)')
  if cls and func then
    local ok, pkg = pcall(require, 'applua.'..cls)
    if ok then
      local ret, msg = pcall(pkg[func], mth, uri, qs)
      if ret then
        ngx.say(msg)
        return
      end
    end
  end
  ngx.say('Access wrong')
  ngx.exit(404)
end

xpcall( main, function (err)
  ngx.say(string.format(err)) end
)
@


1.2
log
@UPDATE: seperate function code and route code
@
text
@d13 1
a13 1
    local ok, pkg = pcall(require, 'applua/'..cls)
@


1.1
log
@INSERT: add openresty app with lua
@
text
@a0 64
local upload = require 'resty.upload'
local mysql_pool = require 'applua/mysql_pool'

local function call_upload()
  local chunk_size = 4096
  local form, err = upload:new(chunk_size)
  if not form then
    ngx.say('upload fail'..err)
    return
  end

  form:set_timeout(1000)
  local fname, fdout
  while true do
    local typ, res, err = form:read()
    if not typ then
      ngx.say('form read fail'..err)
      return
    end
    if typ == "header" then
      local k, v = res[1], res[2];
      ngx.say(k..':'..v)
      if k == "Content-Disposition" then
        fname = v:match('filename="(.*)"')
        if fname then
          fdout = io.open(fname, 'wb+')
          if not fdout then ngx.say('open fail '..fname) end
        end
      end
    elseif typ == "body" then
      if fdout then fdout:write(res); end
      ngx.say(res:len())
    elseif typ == "part_end" then
      if fdout then fdout:close(); fname=nil; fdout=nil; end
    else
      break
    end
  end
end

local function upgrade_later()
  local function upgrade(premature)
    if not premature then
      local t = os.date()
      os.execute('touch '..t..'.txt')
    end
  end
  local ok, err = ngx.timer.at(1, upgrade)
  if not ok then ngx.say('timer fail'); end
end

local function mysql_query()
  local ok, res, state = mysql_pool:query("DELETE FROM beauty WHERE id=2;")
  if not ok then ngx.say(res); return end
  if type(res) == "table" then
    for k,v in pairs(res) do ngx.say(k..' : '..v) end
  elseif type(res) == "string" then
    ngx.say(res)
  else
    ngx.say(type(res) )
  end
  ngx.say(state)
end

d3 1
a3 5
local function do_req(mth, uri, qs, body)
  --call_upload()
  --upgrade_later()
  mysql_query()
end
d10 11
a20 6
  if ( mth == "GET" ) or ( mth == "DELETE" ) then
    do_req(mth, uri, qs, nil)
  else
    --ngx.req.read_body();
    local body --= ngx.req.get_body_data() or ''; -- avoid nil, differe from nil
    do_req(mth, uri, qs, body)
d22 2
@

